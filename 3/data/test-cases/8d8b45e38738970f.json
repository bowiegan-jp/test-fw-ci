{"uid":"8d8b45e38738970f","name":"test_sr_static_cond[chrome-User IP Address v6_Less than or equal to_block]","fullName":"tests.end2end.rules_console.test_smart_rule_flow.TestSmartRuleFlow#test_sr_static_cond","historyId":"3f2439da75883fb92d1d28187d966b07","time":{"start":1660031231468,"stop":1660031231468,"duration":0},"status":"broken","statusMessage":"TimeoutError: Failed to login.","statusTrace":"page = <fw.pages.login_page.LoginPage object at 0x7f31790c7f50>\nwait_duration = 5, fail_message = 'Failed to login.'\n\n    @contextmanager\n    def url_change(page, wait_duration=5, fail_message=''):\n        \"\"\"\n        context manager for url change driver wait to be used in tests when url change is expected\n        \"\"\"\n        current_url = page.driver.current_url\n        yield\n        try:\n>           WebDriverWait(page.driver, wait_duration).until(url_changed(current_url))\n\nutils/explicit_waits/custom_waits.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"40d53c9a81ce8595398437ef443ad06a\")>\nmethod = <utils.explicit_waits.custom_waits.url_changed object at 0x7f3179009450>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ncfg = <config.Config object at 0x7f3179cbbc50>\nusers = <config.Credentials object at 0x7f31793fc850>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40d53c9a81ce8595398437ef443ad06a\")>\n\n    @allure.step(\"UI Login\")\n    @pytest.fixture\n    def ui_login(cfg, users, browser):\n        \"\"\"\n        Logs in test to fraudwall and logs out after test\n        \"\"\"\n        browser.get(cfg.TEST_URL)\n        login_page = fw.pages.login_page.LoginPage(browser)\n        if login_page.get_current_url_route() == 'login':\n            login_page.enter_username(users.ADMIN.username)\n            login_page.enter_password(users.ADMIN.password)\n            time.sleep(2)\n            with url_change(login_page, fail_message=\"Failed to login.\"):\n>               landing_page = login_page.click_login()\n\ntests/conftest.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../_tool/Python/3.7.13/x64/lib/python3.7/contextlib.py:119: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npage = <fw.pages.login_page.LoginPage object at 0x7f31790c7f50>\nwait_duration = 5, fail_message = 'Failed to login.'\n\n    @contextmanager\n    def url_change(page, wait_duration=5, fail_message=''):\n        \"\"\"\n        context manager for url change driver wait to be used in tests when url change is expected\n        \"\"\"\n        current_url = page.driver.current_url\n        yield\n        try:\n            WebDriverWait(page.driver, wait_duration).until(url_changed(current_url))\n        except TimeoutException as te:\n            if fail_message:\n>               raise TimeoutError(fail_message)\nE               TimeoutError: Failed to login.\n\nutils/explicit_waits/custom_waits.py:33: TimeoutError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"check_known_issues","time":{"start":1660031231468,"stop":1660031231468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1660031231468,"stop":1660031231469,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login","time":{"start":1660031231469,"stop":1660031239132,"duration":7663},"status":"broken","statusMessage":"TimeoutError: Failed to login.\n","statusTrace":"  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/tests/conftest.py\", line 192, in ui_login\n    landing_page = login_page.click_login()\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/contextlib.py\", line 119, in __exit__\n    next(self.gen)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/explicit_waits/custom_waits.py\", line 33, in url_change\n    raise TimeoutError(fail_message)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"afterStages":[{"name":"fw_api::0","time":{"start":1660031239190,"stop":1660031239190,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.rules_console"},{"name":"suite","value":"test_smart_rule_flow"},{"name":"subSuite","value":"TestSmartRuleFlow"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"8840-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.rules_console.test_smart_rule_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"smart_rules_static_conditions","value":"{'field': 'User IP Address v6', 'decision': 'block', 'operator': 'Less than or equal to', 'value_option': 'IP Address v6:', 'value': '70d9:3dbb:2508:ee85:ffff:ffff:ffff:ffff', 'txn_update': {'user_ipv6': '70d9:3dbb:2508:ee85:f23e:a831:90ce:a77e'}, 'expected_response': 'block'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"f25ebfb8009511bd","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/f25ebfb8009511bd","status":"passed","time":{"start":1658476475501,"stop":1658476486481,"duration":10980}},{"uid":"a3a888523c6405c9","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/a3a888523c6405c9","status":"passed","time":{"start":1658403279677,"stop":1658403290694,"duration":11017}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"8d8b45e38738970f.json","parameterValues":["'chrome'","{'field': 'User IP Address v6', 'decision': 'block', 'operator': 'Less than or equal to', 'value_option': 'IP Address v6:', 'value': '70d9:3dbb:2508:ee85:ffff:ffff:ffff:ffff', 'txn_update': {'user_ipv6': '70d9:3dbb:2508:ee85:f23e:a831:90ce:a77e'}, 'expected_response': 'block'}"]}