{"uid":"5e8246d287c71464","name":"Test Transaction API Required Fields Error Message","fullName":"tests.end2end.transactions.test_required_fields.TestTxnAPIRequiredFields#test_required_fields_omited","historyId":"8d29445d649770b027f6f0db476969c8","time":{"start":1660032441162,"stop":1660032441163,"duration":1},"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7efc19dbdcd0>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7efc1a745290>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7efc19c78d90>\nrequired_fields_txn_channel = ({'Billing Address': 'billing_address', 'Billing Amount': 'billing_amt', 'Billing Country': 'billing_country_alpha2', 'Billing Currency': 'billing_currency', ...}, (2, 'Mobile App'))\n\n    @allure.title(\"Test Transaction API Required Fields Error Message\")\n    def test_required_fields_omited(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_omit_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = {}\n        # Remove all REQUIRED fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n>       txn_resp = fw_api.send_transaction(transaction)\n\ntests/end2end/transactions/test_required_fields.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfw/api/client.py:51: in send_transaction\n    resp = self._post_request(ENDPOINT, params=payload)\nfw/api/client.py:34: in _post_request\n    resp = self.session.post(url=endpoint, headers=self._get_header(), data=params, verify=False)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py:590: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py:528: in request\n    prep = self.prepare_request(req)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py:466: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/models.py:316: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = '/api/transaction'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?\n\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/models.py:390: MissingSchema","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1660032391070,"stop":1660032391070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1660032391070,"stop":1660032391071,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1660032441161,"stop":1660032441161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1660032441161,"stop":1660032441161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1660032441161,"stop":1660032441161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"required_fields_txn_channel","time":{"start":1660032441161,"stop":1660032441162,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_channel","time":{"start":1660032441161,"stop":1660032441161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7efc19dbdcd0>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7efc1a745290>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7efc19c78d90>\nrequired_fields_txn_channel = ({'Billing Address': 'billing_address', 'Billing Amount': 'billing_amt', 'Billing Country': 'billing_country_alpha2', 'Billing Currency': 'billing_currency', ...}, (2, 'Mobile App'))\n\n    @allure.title(\"Test Transaction API Required Fields Error Message\")\n    def test_required_fields_omited(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_omit_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = {}\n        # Remove all REQUIRED fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n>       txn_resp = fw_api.send_transaction(transaction)\n\ntests/end2end/transactions/test_required_fields.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfw/api/client.py:51: in send_transaction\n    resp = self._post_request(ENDPOINT, params=payload)\nfw/api/client.py:34: in _post_request\n    resp = self.session.post(url=endpoint, headers=self._get_header(), data=params, verify=False)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py:590: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py:528: in request\n    prep = self.prepare_request(req)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py:466: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/models.py:316: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = '/api/transaction'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?\n\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/models.py:390: MissingSchema","steps":[{"name":"Send test transaction","time":{"start":1660032441162,"stop":1660032441163,"duration":1},"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?\n","statusTrace":"  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/fw/api/client.py\", line 51, in send_transaction\n    resp = self._post_request(ENDPOINT, params=payload)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/fw/api/client.py\", line 34, in _post_request\n    resp = self.session.post(url=endpoint, headers=self._get_header(), data=params, verify=False)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py\", line 590, in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py\", line 528, in request\n    prep = self.prepare_request(req)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/sessions.py\", line 466, in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/models.py\", line 316, in prepare\n    self.prepare_url(url, params)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/requests/models.py\", line 390, in prepare_url\n    raise MissingSchema(error)\n","steps":[],"attachments":[{"uid":"2a51bffec35a1b0b","name":"Transaction payload details","source":"2a51bffec35a1b0b.txt","type":"text/plain","size":197}],"parameters":[{"name":"payload","value":"{'transaction_id_ext': 'tt_required_fields_omit_Mobile App_20220809_080721', 'transaction_channel': '2'}"}],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"fw_api::0","time":{"start":1660032441231,"stop":1660032441231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"parentSuite","value":"tests.end2end.transactions"},{"name":"suite","value":"test_required_fields"},{"name":"subSuite","value":"TestTxnAPIRequiredFields"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"12277-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.transactions.test_required_fields"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"txn_channel","value":"(2, 'Mobile App')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":2,"unknown":0,"total":6},"items":[{"uid":"18d397c3070ac216","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/35//#testresult/18d397c3070ac216","status":"passed","time":{"start":1660024561472,"stop":1660024561506,"duration":34}},{"uid":"10e15370b1ad9fc","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/10e15370b1ad9fc","status":"failed","statusDetails":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","time":{"start":1658485149355,"stop":1658485149390,"duration":35}},{"uid":"5a2e0aa0130a2ada","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/34//#testresult/5a2e0aa0130a2ada","status":"passed","time":{"start":1658390184695,"stop":1658390184730,"duration":35}},{"uid":"9e9d50a645470a33","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/32//#testresult/9e9d50a645470a33","status":"failed","statusDetails":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","time":{"start":1658386872131,"stop":1658386872182,"duration":51}},{"uid":"b7c14498f7493fc2","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/31//#testresult/b7c14498f7493fc2","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='10.20.20.221', port=443): Max retries exceeded with url: /api/transaction (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)')))","time":{"start":1658386197679,"stop":1658386197694,"duration":15}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"5e8246d287c71464.json","parameterValues":["(2, 'Mobile App')"]}