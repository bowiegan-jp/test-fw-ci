{"uid":"74c6b859d3d0762c","name":"Smart Rule Add Score: Shipping State","fullName":"tests.end2end.rules_console.test_smart_rule_flow.TestSmartRuleFlow#test_sr_scoring","historyId":"30d95eab51ec0a82550873501de9a6dd","time":{"start":1658482960565,"stop":1658482971165,"duration":10600},"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}","statusTrace":"fw_response = {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n>           assert 299 >= fw_response['code'] >= 200\nE           AssertionError\n\nutils/asserts/fraudwall_response.py:9: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7f398f8b4fd0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7f398f5440d0>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7f398f67ec50>\nsmart_rules_add_score = {'field': 'Shipping State', 'operator': 'Matches', 'txn_update': {'shipping_state': 'test_automation'}, 'value': 'test_automation', ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7f398f67e050>\ncleanup_smart_rules = ['tr_Shipping State_add_score_20220722_094240']\n\n    def test_sr_scoring(self, fw_api, ui_login, smart_rules_add_score, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_add_score['field']}_add_score\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        TEST_SCORE = 90\n        TEST_SCORE_REASON = f\"test automation: {UNIQUE_INDENTIFIER}\"\n        allure.dynamic.title(f\"Smart Rule Add Score: {smart_rules_add_score['field']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_add_score['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_add_score['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_add_score['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_add_score['value'])\n        create_rule_page.click_add_scoring()\n        create_rule_page.enter_scoring(TEST_SCORE)\n        create_rule_page.enter_score_reason(TEST_SCORE_REASON)\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send Vanilla transaction via API\n        vanilla_txn = txn_samples.VANILLA\n        vanilla_resp = fw_api.send_transaction(vanilla_txn)\n    \n        # Send Test Transaction via API\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_add_score['txn_update'])\n        resp = fw_api.send_transaction(transaction)\n    \n        # Check Transaction response expectation\n        # Delete is run first to ensure cleanup of rules regardless if smart rule is correct to avoid clashing with other tests\n        assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # Vanilla transaction expected to always score and pass fw\n>       assert_txn_matches_decision(resp, 'score', TEST_RULE_NAME)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts/fraudwall_response.py:51: in assert_txn_matches_decision\n    assert_txn_scored(fw_response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfw_response = {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n            assert 299 >= fw_response['code'] >= 200\n            assert fw_response['decline_rule'] is None\n            assert not fw_response['error']\n            if score_expectation:\n                assert fw_response['score_reason'] == score_expectation\n        except AssertionError:\n>           raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\nE           AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n\nutils/asserts/fraudwall_response.py:15: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1658475055993,"stop":1658475055993,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1658475055994,"stop":1658475055994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1658475723406,"stop":1658475724740,"duration":1334},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout","time":{"start":1658475724741,"stop":1658475724741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1658482960489,"stop":1658482960489,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login","time":{"start":1658482960490,"stop":1658482960562,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1658482960490,"stop":1658482960490,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"run_only_str_contains","time":{"start":1658482960563,"stop":1658482960563,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"smart_rules_add_score","time":{"start":1658482960563,"stop":1658482960564,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cab72cf11004b8f1","name":"Test Parameters","source":"cab72cf11004b8f1.txt","type":"text/plain","size":184}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"txn_samples","time":{"start":1658482960564,"stop":1658482960564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cleanup_smart_rules","time":{"start":1658482960564,"stop":1658482960564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}","statusTrace":"fw_response = {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n>           assert 299 >= fw_response['code'] >= 200\nE           AssertionError\n\nutils/asserts/fraudwall_response.py:9: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7f398f8b4fd0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7f398f5440d0>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7f398f67ec50>\nsmart_rules_add_score = {'field': 'Shipping State', 'operator': 'Matches', 'txn_update': {'shipping_state': 'test_automation'}, 'value': 'test_automation', ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7f398f67e050>\ncleanup_smart_rules = ['tr_Shipping State_add_score_20220722_094240']\n\n    def test_sr_scoring(self, fw_api, ui_login, smart_rules_add_score, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_add_score['field']}_add_score\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        TEST_SCORE = 90\n        TEST_SCORE_REASON = f\"test automation: {UNIQUE_INDENTIFIER}\"\n        allure.dynamic.title(f\"Smart Rule Add Score: {smart_rules_add_score['field']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_add_score['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_add_score['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_add_score['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_add_score['value'])\n        create_rule_page.click_add_scoring()\n        create_rule_page.enter_scoring(TEST_SCORE)\n        create_rule_page.enter_score_reason(TEST_SCORE_REASON)\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send Vanilla transaction via API\n        vanilla_txn = txn_samples.VANILLA\n        vanilla_resp = fw_api.send_transaction(vanilla_txn)\n    \n        # Send Test Transaction via API\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_add_score['txn_update'])\n        resp = fw_api.send_transaction(transaction)\n    \n        # Check Transaction response expectation\n        # Delete is run first to ensure cleanup of rules regardless if smart rule is correct to avoid clashing with other tests\n        assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # Vanilla transaction expected to always score and pass fw\n>       assert_txn_matches_decision(resp, 'score', TEST_RULE_NAME)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts/fraudwall_response.py:51: in assert_txn_matches_decision\n    assert_txn_scored(fw_response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfw_response = {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n            assert 299 >= fw_response['code'] >= 200\n            assert fw_response['decline_rule'] is None\n            assert not fw_response['error']\n            if score_expectation:\n                assert fw_response['score_reason'] == score_expectation\n        except AssertionError:\n>           raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\nE           AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n\nutils/asserts/fraudwall_response.py:15: AssertionError","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658482960568,"stop":1658482960906,"duration":338},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658482960920,"stop":1658482961016,"duration":96},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click Add New Rule","time":{"start":1658482961023,"stop":1658482961356,"duration":333},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658482961023,"stop":1658482961235,"duration":212},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Tick Activate Rule upon save","time":{"start":1658482961356,"stop":1658482961462,"duration":106},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in Rule Name","time":{"start":1658482961462,"stop":1658482961617,"duration":155},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"name","value":"'tr_Shipping State_add_score_20220722_094240'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select static condition from dropdown: 'Shipping State'","time":{"start":1658482961617,"stop":1658482961701,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"field","value":"'Shipping State'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select condition option from dropdown: 'Matches'","time":{"start":1658482961702,"stop":1658482961789,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"opt","value":"'Matches'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select value type from dropdown: 'Custom:'","time":{"start":1658482961789,"stop":1658482961872,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Custom:'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in value input: 'test_automation'","time":{"start":1658482961872,"stop":1658482962529,"duration":657},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'test_automation'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click Add Scoring","time":{"start":1658482962529,"stop":1658482962601,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in score","time":{"start":1658482962601,"stop":1658482962712,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"score","value":"90"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in score reason","time":{"start":1658482962712,"stop":1658482962904,"duration":192},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"reason","value":"'test automation: Shipping State_add_score'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in comments","time":{"start":1658482962904,"stop":1658482963059,"duration":155},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"comments","value":"'test automation rule (delete me)'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click confirm new rule","time":{"start":1658482963060,"stop":1658482966207,"duration":3147},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658482968209,"stop":1658482968743,"duration":534},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658482968209,"stop":1658482968248,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Shipping State_add_score_20220722_094240'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658482969745,"stop":1658482969849,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Send test transaction","time":{"start":1658482969899,"stop":1658482970493,"duration":594},"status":"passed","steps":[],"attachments":[{"uid":"619563e6f9ca83b2","name":"Transaction payload details","source":"619563e6f9ca83b2.txt","type":"text/plain","size":1341},{"uid":"3c19d31ead07e140","name":"Transaction response details","source":"3c19d31ead07e140.txt","type":"text/plain","size":114}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-999', 'merch_name': 'test-automation-vanilla', 'merch_cat_code': '5816', 'merch_group_id': '12345', 'ISO_MTI': '9999', 'pos_entry_mode': '009', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.0.3', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'steve_rodgers@test.com', 'cc_firstname': 'steve', 'cc_lastname': 'rodgers', 'cc_bin': '424242', 'cc_last4': '4242', 'cc_last_digits': '4242', 'cc_hash': '477bba133c182267fe5f086924abdc5db71f77bfc27f01f2843f2cdc69d89f05', 'cc_exp_date': '1225', 'billing_firstname': 'steve', 'billing_lastname': 'rodgers', 'billing_address': 'brooklyn', 'billing_state': 'New York', 'billing_country_alpha2': 'CN', 'billing_postal_code': '616', 'billing_currency': 'KRW', 'billing_amt': '1000', 'transaction_channel': '0', 'transaction_id_ext': 'tt_vanilla', 'transaction_id_merch': '123', 'fw_cust_id': '60b7259c48675f1f9cf7c24c', 'fw_cust_code': 'XUNZZ53', 'api_version': '3'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Send test transaction","time":{"start":1658482970494,"stop":1658482971159,"duration":665},"status":"passed","steps":[],"attachments":[{"uid":"6b40580c02e741a3","name":"Transaction payload details","source":"6b40580c02e741a3.txt","type":"text/plain","size":1391},{"uid":"a9757677806ee21a","name":"Transaction response details","source":"a9757677806ee21a.txt","type":"text/plain","size":164}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-000', 'merch_name': 'test-automation-base', 'merch_cat_code': '5732', 'merch_group_id': '54321', 'ISO_MTI': '0110', 'pos_entry_mode': '01', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.1.1', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'tony_stark@test.com', 'cc_firstname': 'tony', 'cc_lastname': 'stark', 'cc_bin': '555555', 'cc_last4': '4444', 'cc_last_digits': '4444', 'cc_hash': '2f725bbd1f405a1ed0336abaf85ddfeb6902a9984a76fd877c3b5cc3b5085a82', 'cc_exp_date': '0226', 'billing_firstname': 'tony', 'billing_lastname': 'stark', 'billing_address': 'Malibu Point', 'billing_state': 'California', 'billing_country_alpha2': 'US', 'billing_postal_code': '10880', 'billing_currency': 'USD', 'billing_amt': '1000', 'transaction_channel': '5', 'transaction_id_ext': 'tt_Shipping State_add_score', 'transaction_id_merch': '321', 'shipping_state': 'test_automation'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658482971159,"stop":1658482971159,"duration":0},"status":"passed","steps":[{"name":"Assert transaction is scored","time":{"start":1658482971159,"stop":1658482971159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Shipping State_add_score_20220722_094240'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658482971159,"stop":1658482971165,"duration":6},"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 51, in assert_txn_matches_decision\n    assert_txn_scored(fw_response)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 15, in assert_txn_scored\n    raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\n","steps":[{"name":"Assert transaction is scored","time":{"start":1658482971160,"stop":1658482971160,"duration":0},"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 15, in assert_txn_scored\n    raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\n","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 400, 'decline_rule': 'tr_Shipping State_Billing Currency_20220722_092852', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Shipping State_add_score_20220722_094240'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"8744a92bc687a5a8","name":"d57c758b-3f96-4c8d-92f7-7e0ac7fe1dfc-attachment.png","source":"8744a92bc687a5a8.png","type":"image/png","size":87867}],"parameters":[],"stepsCount":24,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"cleanup_smart_rules::0","time":{"start":1658482971340,"stop":1658482975727,"duration":4387},"status":"passed","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658482971345,"stop":1658482971421,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658482971421,"stop":1658482971577,"duration":156},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658482973809,"stop":1658482974367,"duration":558},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658482973809,"stop":1658482973845,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Shipping State_add_score_20220722_094240'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658482975368,"stop":1658482975474,"duration":106},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click delete rule","time":{"start":1658482975475,"stop":1658482975561,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click confirm delete rule","time":{"start":1658482975561,"stop":1658482975664,"duration":103},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":7,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ui_login::0","time":{"start":1658482975730,"stop":1658482975730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api::0","time":{"start":1658482975731,"stop":1658482975731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout::0","time":{"start":1658483077550,"stop":1658483077793,"duration":243},"status":"passed","steps":[{"name":"Click Logout","time":{"start":1658483077671,"stop":1658483077785,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"browser::0","time":{"start":1658483077833,"stop":1658483078892,"duration":1059},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"indevelopment"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.rules_console"},{"name":"suite","value":"test_smart_rule_flow"},{"name":"subSuite","value":"TestSmartRuleFlow"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"4335-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.rules_console.test_smart_rule_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"smart_rules_add_score","value":"{'field': 'Shipping State', 'operator': ['Matches', 'Does not match', 'Contains', 'Does not contain', 'In Group', 'Not In Group'], 'value_option': ['Custom:', 'Custom:', 'Custom:', 'Custom:', 'TA_FW: Generic Text', 'TA_FW: Generic Text'], 'value': ['test_automation', 'test_automation', 'automation', 'automation', None, None], 'txn_update': [{'shipping_state': 'test_automation'}, {'shipping_state': 'singapore'}, {'shipping_state': 'test_automation'}, {'shipping_state': 'singapore'}, {'shipping_state': 'test_automation'}, {'shipping_state': 'singapore'}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"6cae2be16bc1ef1c","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/6cae2be16bc1ef1c","status":"passed","time":{"start":1658409683235,"stop":1658409693786,"duration":10551}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression","indevelopment"]},"source":"74c6b859d3d0762c.json","parameterValues":["'chrome'","{'field': 'Shipping State', 'operator': ['Matches', 'Does not match', 'Contains', 'Does not contain', 'In Group', 'Not In Group'], 'value_option': ['Custom:', 'Custom:', 'Custom:', 'Custom:', 'TA_FW: Generic Text', 'TA_FW: Generic Text'], 'value': ['test_automation', 'test_automation', 'automation', 'automation', None, None], 'txn_update': [{'shipping_state': 'test_automation'}, {'shipping_state': 'singapore'}, {'shipping_state': 'test_automation'}, {'shipping_state': 'singapore'}, {'shipping_state': 'test_automation'}, {'shipping_state': 'singapore'}]}"]}