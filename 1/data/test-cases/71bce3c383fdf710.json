{"uid":"71bce3c383fdf710","name":"Smart Rule Add Score: Shipping Postal Code","fullName":"tests.end2end.rules_console.test_smart_rule_flow.TestSmartRuleFlow#test_sr_scoring","historyId":"f2fc9bd1b2d69c428862d7d5992b89a2","time":{"start":1658409713090,"stop":1658409724297,"duration":11207},"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}","statusTrace":"fw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n>           assert 299 >= fw_response['code'] >= 200\nE           AssertionError\n\nutils/asserts/fraudwall_response.py:9: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7fec94a76150>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fec95ecbe10>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7fec948a8350>\nsmart_rules_add_score = {'field': 'Shipping Postal Code', 'operator': 'Matches', 'txn_update': {'shipping_postal_code': '54321'}, 'value': '54321', ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fec946bb5d0>\ncleanup_smart_rules = ['tr_Shipping Postal Code_add_score_20220721_132153']\n\n    def test_sr_scoring(self, fw_api, ui_login, smart_rules_add_score, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_add_score['field']}_add_score\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        TEST_SCORE = 90\n        TEST_SCORE_REASON = f\"test automation: {UNIQUE_INDENTIFIER}\"\n        allure.dynamic.title(f\"Smart Rule Add Score: {smart_rules_add_score['field']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_add_score['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_add_score['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_add_score['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_add_score['value'])\n        create_rule_page.click_add_scoring()\n        create_rule_page.enter_scoring(TEST_SCORE)\n        create_rule_page.enter_score_reason(TEST_SCORE_REASON)\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send Vanilla transaction via API\n        vanilla_txn = txn_samples.VANILLA\n        vanilla_resp = fw_api.send_transaction(vanilla_txn)\n    \n        # Send Test Transaction via API\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_add_score['txn_update'])\n        resp = fw_api.send_transaction(transaction)\n    \n        # Check Transaction response expectation\n        # Delete is run first to ensure cleanup of rules regardless if smart rule is correct to avoid clashing with other tests\n        assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # Vanilla transaction expected to always score and pass fw\n>       assert_txn_matches_decision(resp, 'score', TEST_RULE_NAME)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts/fraudwall_response.py:51: in assert_txn_matches_decision\n    assert_txn_scored(fw_response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n            assert 299 >= fw_response['code'] >= 200\n            assert fw_response['decline_rule'] is None\n            assert not fw_response['error']\n            if score_expectation:\n                assert fw_response['score_reason'] == score_expectation\n        except AssertionError:\n>           raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\nE           AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n\nutils/asserts/fraudwall_response.py:15: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ui_login","time":{"start":1658409712983,"stop":1658409713088,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1658409712983,"stop":1658409712983,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1658409712983,"stop":1658409712983,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"run_only_str_contains","time":{"start":1658409713088,"stop":1658409713088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"smart_rules_add_score","time":{"start":1658409713088,"stop":1658409713089,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b7a3bbea4d191c58","name":"Test Parameters","source":"b7a3bbea4d191c58.txt","type":"text/plain","size":176}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"txn_samples","time":{"start":1658409713089,"stop":1658409713089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cleanup_smart_rules","time":{"start":1658409713089,"stop":1658409713089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}","statusTrace":"fw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n>           assert 299 >= fw_response['code'] >= 200\nE           AssertionError\n\nutils/asserts/fraudwall_response.py:9: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7fec94a76150>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fec95ecbe10>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7fec948a8350>\nsmart_rules_add_score = {'field': 'Shipping Postal Code', 'operator': 'Matches', 'txn_update': {'shipping_postal_code': '54321'}, 'value': '54321', ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fec946bb5d0>\ncleanup_smart_rules = ['tr_Shipping Postal Code_add_score_20220721_132153']\n\n    def test_sr_scoring(self, fw_api, ui_login, smart_rules_add_score, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_add_score['field']}_add_score\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        TEST_SCORE = 90\n        TEST_SCORE_REASON = f\"test automation: {UNIQUE_INDENTIFIER}\"\n        allure.dynamic.title(f\"Smart Rule Add Score: {smart_rules_add_score['field']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_add_score['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_add_score['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_add_score['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_add_score['value'])\n        create_rule_page.click_add_scoring()\n        create_rule_page.enter_scoring(TEST_SCORE)\n        create_rule_page.enter_score_reason(TEST_SCORE_REASON)\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send Vanilla transaction via API\n        vanilla_txn = txn_samples.VANILLA\n        vanilla_resp = fw_api.send_transaction(vanilla_txn)\n    \n        # Send Test Transaction via API\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_add_score['txn_update'])\n        resp = fw_api.send_transaction(transaction)\n    \n        # Check Transaction response expectation\n        # Delete is run first to ensure cleanup of rules regardless if smart rule is correct to avoid clashing with other tests\n        assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # Vanilla transaction expected to always score and pass fw\n>       assert_txn_matches_decision(resp, 'score', TEST_RULE_NAME)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts/fraudwall_response.py:51: in assert_txn_matches_decision\n    assert_txn_scored(fw_response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\nscore_expectation = ''\n\n    @allure.step(\"Assert transaction is scored\")\n    def assert_txn_scored(fw_response, score_expectation=''):\n        try:\n            assert 299 >= fw_response['code'] >= 200\n            assert fw_response['decline_rule'] is None\n            assert not fw_response['error']\n            if score_expectation:\n                assert fw_response['score_reason'] == score_expectation\n        except AssertionError:\n>           raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\nE           AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n\nutils/asserts/fraudwall_response.py:15: AssertionError","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658409713092,"stop":1658409713569,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658409713578,"stop":1658409714224,"duration":646},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click Add New Rule","time":{"start":1658409714228,"stop":1658409714619,"duration":391},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658409714229,"stop":1658409714503,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Tick Activate Rule upon save","time":{"start":1658409714619,"stop":1658409714704,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in Rule Name","time":{"start":1658409714705,"stop":1658409714874,"duration":169},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"name","value":"'tr_Shipping Postal Code_add_score_20220721_132153'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select static condition from dropdown: 'Shipping Postal Code'","time":{"start":1658409714874,"stop":1658409714958,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"field","value":"'Shipping Postal Code'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select condition option from dropdown: 'Matches'","time":{"start":1658409714959,"stop":1658409715047,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"opt","value":"'Matches'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select value type from dropdown: 'Custom:'","time":{"start":1658409715047,"stop":1658409715132,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Custom:'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in value input: '54321'","time":{"start":1658409715133,"stop":1658409715779,"duration":646},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'54321'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click Add Scoring","time":{"start":1658409715779,"stop":1658409715851,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in score","time":{"start":1658409715852,"stop":1658409715963,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"score","value":"90"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in score reason","time":{"start":1658409715963,"stop":1658409716136,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"reason","value":"'test automation: Shipping Postal Code_add_score'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in comments","time":{"start":1658409716136,"stop":1658409716298,"duration":162},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"comments","value":"'test automation rule (delete me)'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click confirm new rule","time":{"start":1658409716298,"stop":1658409719411,"duration":3113},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658409721414,"stop":1658409721904,"duration":490},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658409721414,"stop":1658409721443,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Shipping Postal Code_add_score_20220721_132153'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658409722906,"stop":1658409723011,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Send test transaction","time":{"start":1658409723033,"stop":1658409723617,"duration":584},"status":"passed","steps":[],"attachments":[{"uid":"63658399ac400e5a","name":"Transaction payload details","source":"63658399ac400e5a.txt","type":"text/plain","size":1341},{"uid":"62495f997498fdae","name":"Transaction response details","source":"62495f997498fdae.txt","type":"text/plain","size":114}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-999', 'merch_name': 'test-automation-vanilla', 'merch_cat_code': '5816', 'merch_group_id': '12345', 'ISO_MTI': '9999', 'pos_entry_mode': '009', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.0.3', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'steve_rodgers@test.com', 'cc_firstname': 'steve', 'cc_lastname': 'rodgers', 'cc_bin': '424242', 'cc_last4': '4242', 'cc_last_digits': '4242', 'cc_hash': '477bba133c182267fe5f086924abdc5db71f77bfc27f01f2843f2cdc69d89f05', 'cc_exp_date': '1225', 'billing_firstname': 'steve', 'billing_lastname': 'rodgers', 'billing_address': 'brooklyn', 'billing_state': 'New York', 'billing_country_alpha2': 'CN', 'billing_postal_code': '616', 'billing_currency': 'KRW', 'billing_amt': '1000', 'transaction_channel': '0', 'transaction_id_ext': 'tt_vanilla', 'transaction_id_merch': '123', 'fw_cust_id': '60b7259c48675f1f9cf7c24c', 'fw_cust_code': 'XUNZZ53', 'api_version': '3'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Send test transaction","time":{"start":1658409723617,"stop":1658409724296,"duration":679},"status":"passed","steps":[],"attachments":[{"uid":"7bc51122e5190fbe","name":"Transaction payload details","source":"7bc51122e5190fbe.txt","type":"text/plain","size":1393},{"uid":"47fbe8801d71b2f5","name":"Transaction response details","source":"47fbe8801d71b2f5.txt","type":"text/plain","size":163}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-000', 'merch_name': 'test-automation-base', 'merch_cat_code': '5732', 'merch_group_id': '54321', 'ISO_MTI': '0110', 'pos_entry_mode': '01', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.1.1', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'tony_stark@test.com', 'cc_firstname': 'tony', 'cc_lastname': 'stark', 'cc_bin': '555555', 'cc_last4': '4444', 'cc_last_digits': '4444', 'cc_hash': '2f725bbd1f405a1ed0336abaf85ddfeb6902a9984a76fd877c3b5cc3b5085a82', 'cc_exp_date': '0226', 'billing_firstname': 'tony', 'billing_lastname': 'stark', 'billing_address': 'Malibu Point', 'billing_state': 'California', 'billing_country_alpha2': 'US', 'billing_postal_code': '10880', 'billing_currency': 'USD', 'billing_amt': '1000', 'transaction_channel': '7', 'transaction_id_ext': 'tt_Shipping Postal Code_add_score', 'transaction_id_merch': '321', 'shipping_postal_code': '54321'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658409724296,"stop":1658409724296,"duration":0},"status":"passed","steps":[{"name":"Assert transaction is scored","time":{"start":1658409724296,"stop":1658409724296,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Shipping Postal Code_add_score_20220721_132153'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658409724296,"stop":1658409724297,"duration":1},"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 51, in assert_txn_matches_decision\n    assert_txn_scored(fw_response)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 15, in assert_txn_scored\n    raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\n","steps":[{"name":"Assert transaction is scored","time":{"start":1658409724297,"stop":1658409724297,"duration":0},"status":"failed","statusMessage":"AssertionError: Transaction response did not score as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 15, in assert_txn_scored\n    raise AssertionError(f'Transaction response did not score as expected: {fw_response}')\n","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Shipping Postal Code_add_score_20220721_132153'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"43f325a835f0a409","name":"dc2f6a50-0e7b-428f-b044-be82e6f3f8d8-attachment.png","source":"43f325a835f0a409.png","type":"image/png","size":88727}],"parameters":[],"stepsCount":24,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"cleanup_smart_rules::0","time":{"start":1658409724395,"stop":1658409728565,"duration":4170},"status":"passed","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658409724397,"stop":1658409724443,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658409724443,"stop":1658409724559,"duration":116},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658409726710,"stop":1658409727291,"duration":581},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658409726710,"stop":1658409726739,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Shipping Postal Code_add_score_20220721_132153'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658409728292,"stop":1658409728379,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click delete rule","time":{"start":1658409728379,"stop":1658409728453,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click confirm delete rule","time":{"start":1658409728453,"stop":1658409728531,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":7,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ui_login::0","time":{"start":1658409728570,"stop":1658409728570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api::0","time":{"start":1658409728570,"stop":1658409728570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"tag","value":"indevelopment"},{"name":"parentSuite","value":"tests.end2end.rules_console"},{"name":"suite","value":"test_smart_rule_flow"},{"name":"subSuite","value":"TestSmartRuleFlow"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"29684-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.rules_console.test_smart_rule_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"smart_rules_add_score","value":"{'field': 'Shipping Postal Code', 'operator': ['Matches', 'Does not match', 'In Group', 'Not In Group'], 'value_option': ['Custom:', 'Custom:', 'TA_FW: Postcode', 'TA_FW: Postcode'], 'value': ['54321', '54321', None, None], 'txn_update': [{'shipping_postal_code': '54321'}, {'shipping_postal_code': '12345'}, {'shipping_postal_code': '54321'}, {'shipping_postal_code': '12345'}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('check_known_issues')","regression","indevelopment"]},"source":"71bce3c383fdf710.json","parameterValues":["'chrome'","{'field': 'Shipping Postal Code', 'operator': ['Matches', 'Does not match', 'In Group', 'Not In Group'], 'value_option': ['Custom:', 'Custom:', 'TA_FW: Postcode', 'TA_FW: Postcode'], 'value': ['54321', '54321', None, None], 'txn_update': [{'shipping_postal_code': '54321'}, {'shipping_postal_code': '12345'}, {'shipping_postal_code': '54321'}, {'shipping_postal_code': '12345'}]}"]}