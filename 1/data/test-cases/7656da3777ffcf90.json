{"uid":"7656da3777ffcf90","name":"Smart Rules Dynamic Field: Shipping Postal Code-Billing Amount (based on preferred currency)","fullName":"tests.end2end.rules_console.test_smart_rule_flow.TestSmartRuleFlow#test_sr_dynamic_cond","historyId":"4ed230bf879ad7eb8e7a5b6838e2d7a5","time":{"start":1658408960757,"stop":1658408972996,"duration":12239},"status":"failed","statusMessage":"AssertionError: Transaction response did not decline as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}","statusTrace":"fw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\ndecline_rule_name = 'tr_Shipping Postal Code_Preferred Currency_20220721_130920'\n\n    @allure.step(\"Assert transaction is blocked\")\n    def assert_txn_blocked(fw_response, decline_rule_name=''):\n        try:\n            assert fw_response['code'] == 400\n            assert not fw_response['error']\n            if decline_rule_name:\n>               assert fw_response['decline_rule'] == decline_rule_name\nE               AssertionError\n\nutils/asserts/fraudwall_response.py:23: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7fec94edbf10>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fec94b45f10>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7fec94b0a0d0>\nsmart_rules_dynamic_conditions = {'currency': \"('KRW')\", 'field': 'Shipping Postal Code', 'operator': 'Matches', 'repeat_txn': 1, ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fec94b0a090>\ncleanup_smart_rules = ['tr_Shipping Postal Code_Preferred Currency_20220721_130920']\n\n    def test_sr_dynamic_cond(self, fw_api, ui_login, smart_rules_dynamic_conditions, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_dynamic_conditions['field']}_{self._get_dynamic_velocity_abbrev(smart_rules_dynamic_conditions['velocity_type'])}\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        repeat_txn = range(smart_rules_dynamic_conditions['repeat_txn'])\n        allure.dynamic.title(f\"Smart Rules Dynamic Field: {smart_rules_dynamic_conditions['field']}-{smart_rules_dynamic_conditions['velocity_type']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_dynamic_conditions['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_dynamic_conditions['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_dynamic_conditions['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_dynamic_conditions['value'])\n        create_rule_page.select_decision('block')\n        create_rule_page.click_add_dynamic_condition()\n        create_rule_page.select_dynamic_cond_velocity_type(smart_rules_dynamic_conditions['velocity_type'])\n        create_rule_page.select_dynamic_cond_threshold_currency(smart_rules_dynamic_conditions['currency'])\n        create_rule_page.enter_dynamic_cond_threshold(smart_rules_dynamic_conditions['threshold'])\n        create_rule_page.enter_dynamic_cond_duration(1)  # days\n        create_rule_page.select_dynamic_cond_group_by(smart_rules_dynamic_conditions['field'])\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send & verify Vanilla transaction\n        vanilla_txn = txn_samples.VANILLA\n        for _ in repeat_txn:\n            vanilla_resp = fw_api.send_transaction(vanilla_txn)\n            assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # vanilla transaction should not be blocked by rule\n    \n        # Send Test transaction\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_dynamic_conditions['txn_update'])\n        test_resp = []\n        for _ in repeat_txn:\n            test_resp.append(fw_api.send_transaction(transaction))\n    \n        # Verify expected transaction decisions\n        # All transactions should go through except the last one\n        for i, resp in enumerate(test_resp):\n            if i == (len(test_resp) - 1):\n>               assert_txn_matches_decision(resp, 'block', TEST_RULE_NAME)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts/fraudwall_response.py:53: in assert_txn_matches_decision\n    assert_txn_blocked(fw_response, decline_rule_name=rule_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\ndecline_rule_name = 'tr_Shipping Postal Code_Preferred Currency_20220721_130920'\n\n    @allure.step(\"Assert transaction is blocked\")\n    def assert_txn_blocked(fw_response, decline_rule_name=''):\n        try:\n            assert fw_response['code'] == 400\n            assert not fw_response['error']\n            if decline_rule_name:\n                assert fw_response['decline_rule'] == decline_rule_name\n        except AssertionError:\n>           raise AssertionError(f'Transaction response did not decline as expected: {fw_response}')\nE           AssertionError: Transaction response did not decline as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n\nutils/asserts/fraudwall_response.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"check_known_issues","time":{"start":1658408960688,"stop":1658408960688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1658408960688,"stop":1658408960688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login","time":{"start":1658408960688,"stop":1658408960756,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"run_only_str_contains","time":{"start":1658408960756,"stop":1658408960756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cleanup_smart_rules","time":{"start":1658408960756,"stop":1658408960756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"smart_rules_dynamic_conditions","time":{"start":1658408960756,"stop":1658408960756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1658408960756,"stop":1658408960756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Transaction response did not decline as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}","statusTrace":"fw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\ndecline_rule_name = 'tr_Shipping Postal Code_Preferred Currency_20220721_130920'\n\n    @allure.step(\"Assert transaction is blocked\")\n    def assert_txn_blocked(fw_response, decline_rule_name=''):\n        try:\n            assert fw_response['code'] == 400\n            assert not fw_response['error']\n            if decline_rule_name:\n>               assert fw_response['decline_rule'] == decline_rule_name\nE               AssertionError\n\nutils/asserts/fraudwall_response.py:23: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7fec94edbf10>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fec94b45f10>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7fec94b0a0d0>\nsmart_rules_dynamic_conditions = {'currency': \"('KRW')\", 'field': 'Shipping Postal Code', 'operator': 'Matches', 'repeat_txn': 1, ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fec94b0a090>\ncleanup_smart_rules = ['tr_Shipping Postal Code_Preferred Currency_20220721_130920']\n\n    def test_sr_dynamic_cond(self, fw_api, ui_login, smart_rules_dynamic_conditions, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_dynamic_conditions['field']}_{self._get_dynamic_velocity_abbrev(smart_rules_dynamic_conditions['velocity_type'])}\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        repeat_txn = range(smart_rules_dynamic_conditions['repeat_txn'])\n        allure.dynamic.title(f\"Smart Rules Dynamic Field: {smart_rules_dynamic_conditions['field']}-{smart_rules_dynamic_conditions['velocity_type']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_dynamic_conditions['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_dynamic_conditions['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_dynamic_conditions['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_dynamic_conditions['value'])\n        create_rule_page.select_decision('block')\n        create_rule_page.click_add_dynamic_condition()\n        create_rule_page.select_dynamic_cond_velocity_type(smart_rules_dynamic_conditions['velocity_type'])\n        create_rule_page.select_dynamic_cond_threshold_currency(smart_rules_dynamic_conditions['currency'])\n        create_rule_page.enter_dynamic_cond_threshold(smart_rules_dynamic_conditions['threshold'])\n        create_rule_page.enter_dynamic_cond_duration(1)  # days\n        create_rule_page.select_dynamic_cond_group_by(smart_rules_dynamic_conditions['field'])\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send & verify Vanilla transaction\n        vanilla_txn = txn_samples.VANILLA\n        for _ in repeat_txn:\n            vanilla_resp = fw_api.send_transaction(vanilla_txn)\n            assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # vanilla transaction should not be blocked by rule\n    \n        # Send Test transaction\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_dynamic_conditions['txn_update'])\n        test_resp = []\n        for _ in repeat_txn:\n            test_resp.append(fw_api.send_transaction(transaction))\n    \n        # Verify expected transaction decisions\n        # All transactions should go through except the last one\n        for i, resp in enumerate(test_resp):\n            if i == (len(test_resp) - 1):\n>               assert_txn_matches_decision(resp, 'block', TEST_RULE_NAME)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts/fraudwall_response.py:53: in assert_txn_matches_decision\n    assert_txn_blocked(fw_response, decline_rule_name=rule_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfw_response = {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, ...}\ndecline_rule_name = 'tr_Shipping Postal Code_Preferred Currency_20220721_130920'\n\n    @allure.step(\"Assert transaction is blocked\")\n    def assert_txn_blocked(fw_response, decline_rule_name=''):\n        try:\n            assert fw_response['code'] == 400\n            assert not fw_response['error']\n            if decline_rule_name:\n                assert fw_response['decline_rule'] == decline_rule_name\n        except AssertionError:\n>           raise AssertionError(f'Transaction response did not decline as expected: {fw_response}')\nE           AssertionError: Transaction response did not decline as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n\nutils/asserts/fraudwall_response.py:25: AssertionError","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658408960759,"stop":1658408961162,"duration":403},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658408961179,"stop":1658408961903,"duration":724},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click Add New Rule","time":{"start":1658408961908,"stop":1658408962305,"duration":397},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658408961908,"stop":1658408962206,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Tick Activate Rule upon save","time":{"start":1658408962305,"stop":1658408962374,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in Rule Name","time":{"start":1658408962374,"stop":1658408962586,"duration":212},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"name","value":"'tr_Shipping Postal Code_Preferred Currency_20220721_130920'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select static condition from dropdown: 'Shipping Postal Code'","time":{"start":1658408962586,"stop":1658408962669,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"field","value":"'Shipping Postal Code'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select condition option from dropdown: 'Matches'","time":{"start":1658408962669,"stop":1658408962754,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"opt","value":"'Matches'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select value type from dropdown: 'Custom:'","time":{"start":1658408962754,"stop":1658408962839,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Custom:'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in value input: '54321'","time":{"start":1658408962840,"stop":1658408963473,"duration":633},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'54321'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select Decision Option: 'block'","time":{"start":1658408963474,"stop":1658408963479,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'block'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click Add dynamic condition","time":{"start":1658408963479,"stop":1658408963555,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Select dynamic velocity type: 'Billing Amount (based on preferred currency)'","time":{"start":1658408963555,"stop":1658408963682,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Billing Amount (based on preferred currency)'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select currency value: '('KRW')'","time":{"start":1658408963682,"stop":1658408963763,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'('KRW')'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in dynamic treshold: 2500","time":{"start":1658408963763,"stop":1658408963897,"duration":134},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"2500"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in dynamic condition value","time":{"start":1658408963897,"stop":1658408963993,"duration":96},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"1"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select dynamic group by condition: 'Shipping Postal Code'","time":{"start":1658408963993,"stop":1658408964609,"duration":616},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Shipping Postal Code'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in comments","time":{"start":1658408964609,"stop":1658408964754,"duration":145},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"comments","value":"'test automation rule (delete me)'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click confirm new rule","time":{"start":1658408964754,"stop":1658408967871,"duration":3117},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658408969873,"stop":1658408970586,"duration":713},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658408969873,"stop":1658408969915,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Shipping Postal Code_Preferred Currency_20220721_130920'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658408971587,"stop":1658408971701,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Send test transaction","time":{"start":1658408971728,"stop":1658408972322,"duration":594},"status":"passed","steps":[],"attachments":[{"uid":"10278132b21fd765","name":"Transaction payload details","source":"10278132b21fd765.txt","type":"text/plain","size":1341},{"uid":"5e5ffebe74394455","name":"Transaction response details","source":"5e5ffebe74394455.txt","type":"text/plain","size":114}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-999', 'merch_name': 'test-automation-vanilla', 'merch_cat_code': '5816', 'merch_group_id': '12345', 'ISO_MTI': '9999', 'pos_entry_mode': '009', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.0.3', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'steve_rodgers@test.com', 'cc_firstname': 'steve', 'cc_lastname': 'rodgers', 'cc_bin': '424242', 'cc_last4': '4242', 'cc_last_digits': '4242', 'cc_hash': '477bba133c182267fe5f086924abdc5db71f77bfc27f01f2843f2cdc69d89f05', 'cc_exp_date': '1225', 'billing_firstname': 'steve', 'billing_lastname': 'rodgers', 'billing_address': 'brooklyn', 'billing_state': 'New York', 'billing_country_alpha2': 'CN', 'billing_postal_code': '616', 'billing_currency': 'KRW', 'billing_amt': '1000', 'transaction_channel': '0', 'transaction_id_ext': 'tt_vanilla', 'transaction_id_merch': '123', 'fw_cust_id': '60b7259c48675f1f9cf7c24c', 'fw_cust_code': 'XUNZZ53', 'api_version': '3'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658408972322,"stop":1658408972322,"duration":0},"status":"passed","steps":[{"name":"Assert transaction is scored","time":{"start":1658408972322,"stop":1658408972322,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Shipping Postal Code_Preferred Currency_20220721_130920'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Send test transaction","time":{"start":1658408972323,"stop":1658408972995,"duration":672},"status":"passed","steps":[],"attachments":[{"uid":"a3beb9cb30596a42","name":"Transaction payload details","source":"a3beb9cb30596a42.txt","type":"text/plain","size":1402},{"uid":"960a81902085bd7c","name":"Transaction response details","source":"960a81902085bd7c.txt","type":"text/plain","size":163}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-000', 'merch_name': 'test-automation-base', 'merch_cat_code': '5732', 'merch_group_id': '54321', 'ISO_MTI': '0110', 'pos_entry_mode': '01', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.1.1', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'tony_stark@test.com', 'cc_firstname': 'tony', 'cc_lastname': 'stark', 'cc_bin': '555555', 'cc_last4': '4444', 'cc_last_digits': '4444', 'cc_hash': '2f725bbd1f405a1ed0336abaf85ddfeb6902a9984a76fd877c3b5cc3b5085a82', 'cc_exp_date': '0226', 'billing_firstname': 'tony', 'billing_lastname': 'stark', 'billing_address': 'Malibu Point', 'billing_state': 'California', 'billing_country_alpha2': 'US', 'billing_postal_code': '10880', 'billing_currency': 'USD', 'billing_amt': '1000', 'transaction_channel': '4', 'transaction_id_ext': 'tt_Shipping Postal Code_Preferred Currency', 'transaction_id_merch': '321', 'shipping_postal_code': '54321'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658408972995,"stop":1658408972996,"duration":1},"status":"failed","statusMessage":"AssertionError: Transaction response did not decline as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 53, in assert_txn_matches_decision\n    assert_txn_blocked(fw_response, decline_rule_name=rule_name)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 25, in assert_txn_blocked\n    raise AssertionError(f'Transaction response did not decline as expected: {fw_response}')\n","steps":[{"name":"Assert transaction is blocked","time":{"start":1658408972996,"stop":1658408972996,"duration":0},"status":"failed","statusMessage":"AssertionError: Transaction response did not decline as expected: {'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/asserts/fraudwall_response.py\", line 25, in assert_txn_blocked\n    raise AssertionError(f'Transaction response did not decline as expected: {fw_response}')\n","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}"},{"name":"decline_rule_name","value":"'tr_Shipping Postal Code_Preferred Currency_20220721_130920'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 400, 'decline_rule': 'tr_Shipping Postal Code_Txn Count_20220721_130905', 'error': False, 'score_reason': None, 'sendforauth': 0, 'sendforreview': 1}"},{"name":"decision","value":"'block'"},{"name":"rule_name","value":"'tr_Shipping Postal Code_Preferred Currency_20220721_130920'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"1e9178a2b62306db","name":"bc6b6824-5859-4139-aad2-6b478d97aff2-attachment.png","source":"1e9178a2b62306db.png","type":"image/png","size":89703}],"parameters":[],"stepsCount":28,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"cleanup_smart_rules::0","time":{"start":1658408973103,"stop":1658408977291,"duration":4188},"status":"passed","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658408973104,"stop":1658408973156,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658408973156,"stop":1658408973260,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658408975424,"stop":1658408975968,"duration":544},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658408975425,"stop":1658408975467,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Shipping Postal Code_Preferred Currency_20220721_130920'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658408976969,"stop":1658408977067,"duration":98},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click delete rule","time":{"start":1658408977067,"stop":1658408977164,"duration":97},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click confirm delete rule","time":{"start":1658408977164,"stop":1658408977260,"duration":96},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":7,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"fw_api::0","time":{"start":1658408977294,"stop":1658408977294,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login::0","time":{"start":1658408977294,"stop":1658408977294,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"tag","value":"indevelopment"},{"name":"parentSuite","value":"tests.end2end.rules_console"},{"name":"suite","value":"test_smart_rule_flow"},{"name":"subSuite","value":"TestSmartRuleFlow"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"29684-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.rules_console.test_smart_rule_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"smart_rules_dynamic_conditions","value":"{'field': 'Shipping Postal Code', 'operator': 'Matches', 'value_option': 'Custom:', 'value': '54321', 'txn_update': {'shipping_postal_code': '54321'}, 'velocity_type': 'Billing Amount (based on preferred currency)', 'currency': \"('KRW')\", 'threshold': 2500, 'repeat_txn': 1}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('check_known_issues')","regression","indevelopment"]},"source":"7656da3777ffcf90.json","parameterValues":["'chrome'","{'field': 'Shipping Postal Code', 'operator': 'Matches', 'value_option': 'Custom:', 'value': '54321', 'txn_update': {'shipping_postal_code': '54321'}, 'velocity_type': 'Billing Amount (based on preferred currency)', 'currency': \"('KRW')\", 'threshold': 2500, 'repeat_txn': 1}"]}