{"uid":"8954ca4e43d5432b","name":"Smart Rule Add Score: Transaction Date","fullName":"tests.end2end.rules_console.test_smart_rule_flow.TestSmartRuleFlow#test_sr_scoring","historyId":"4855e2c5c3a78993a249f150c937b11f","time":{"start":1658483062140,"stop":1658483073307,"duration":11167},"status":"failed","statusMessage":"AssertionError: assert 299 == (200 + 90)","statusTrace":"self = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7f398f7af8d0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7f398f4fbf10>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7f398f4eb310>\nsmart_rules_add_score = {'field': 'Transaction Date', 'operator': 'Matches', 'txn_update': {'transaction_gmt_datetime': '2030-06-01 00:00:00'}, 'value': '2030-06-01', ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7f398f5d9990>\ncleanup_smart_rules = ['tr_Transaction Date_add_score_20220722_094422']\n\n    def test_sr_scoring(self, fw_api, ui_login, smart_rules_add_score, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_add_score['field']}_add_score\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        TEST_SCORE = 90\n        TEST_SCORE_REASON = f\"test automation: {UNIQUE_INDENTIFIER}\"\n        allure.dynamic.title(f\"Smart Rule Add Score: {smart_rules_add_score['field']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_add_score['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_add_score['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_add_score['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_add_score['value'])\n        create_rule_page.click_add_scoring()\n        create_rule_page.enter_scoring(TEST_SCORE)\n        create_rule_page.enter_score_reason(TEST_SCORE_REASON)\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send Vanilla transaction via API\n        vanilla_txn = txn_samples.VANILLA\n        vanilla_resp = fw_api.send_transaction(vanilla_txn)\n    \n        # Send Test Transaction via API\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_add_score['txn_update'])\n        resp = fw_api.send_transaction(transaction)\n    \n        # Check Transaction response expectation\n        # Delete is run first to ensure cleanup of rules regardless if smart rule is correct to avoid clashing with other tests\n        assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # Vanilla transaction expected to always score and pass fw\n        assert_txn_matches_decision(resp, 'score', TEST_RULE_NAME)\n    \n        # Check scores\n        assert vanilla_resp['code'] == 200\n>       assert resp['code'] == (200 + TEST_SCORE)\nE       assert 299 == (200 + 90)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:186: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1658475055993,"stop":1658475055993,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1658475055994,"stop":1658475055994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1658475723406,"stop":1658475724740,"duration":1334},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout","time":{"start":1658475724741,"stop":1658475724741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1658483062060,"stop":1658483062061,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1658483062060,"stop":1658483062060,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login","time":{"start":1658483062061,"stop":1658483062138,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"run_only_str_contains","time":{"start":1658483062138,"stop":1658483062138,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"smart_rules_add_score","time":{"start":1658483062138,"stop":1658483062139,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cce33cb431c8361b","name":"Test Parameters","source":"cce33cb431c8361b.txt","type":"text/plain","size":200}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"txn_samples","time":{"start":1658483062139,"stop":1658483062139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cleanup_smart_rules","time":{"start":1658483062139,"stop":1658483062139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 299 == (200 + 90)","statusTrace":"self = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7f398f7af8d0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7f398f4fbf10>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7f398f4eb310>\nsmart_rules_add_score = {'field': 'Transaction Date', 'operator': 'Matches', 'txn_update': {'transaction_gmt_datetime': '2030-06-01 00:00:00'}, 'value': '2030-06-01', ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7f398f5d9990>\ncleanup_smart_rules = ['tr_Transaction Date_add_score_20220722_094422']\n\n    def test_sr_scoring(self, fw_api, ui_login, smart_rules_add_score, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_add_score['field']}_add_score\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        TEST_SCORE = 90\n        TEST_SCORE_REASON = f\"test automation: {UNIQUE_INDENTIFIER}\"\n        allure.dynamic.title(f\"Smart Rule Add Score: {smart_rules_add_score['field']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_add_score['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_add_score['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_add_score['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_add_score['value'])\n        create_rule_page.click_add_scoring()\n        create_rule_page.enter_scoring(TEST_SCORE)\n        create_rule_page.enter_score_reason(TEST_SCORE_REASON)\n        create_rule_page.enter_comments('test automation rule (delete me)')\n        smartrules_page = create_rule_page.click_confirm()\n    \n        # Check Smart Rule\n        smartrules_page.enter_rules_filter_name(TEST_RULE_NAME)\n        rule = smartrules_page.get_first_rule()\n        assert rule.get_name() == TEST_RULE_NAME\n    \n        # Send Vanilla transaction via API\n        vanilla_txn = txn_samples.VANILLA\n        vanilla_resp = fw_api.send_transaction(vanilla_txn)\n    \n        # Send Test Transaction via API\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': f'tt_{UNIQUE_INDENTIFIER}',\n            'transaction_channel': self.get_random_txn_channel()\n        })\n        transaction.update(smart_rules_add_score['txn_update'])\n        resp = fw_api.send_transaction(transaction)\n    \n        # Check Transaction response expectation\n        # Delete is run first to ensure cleanup of rules regardless if smart rule is correct to avoid clashing with other tests\n        assert_txn_matches_decision(vanilla_resp, 'score', TEST_RULE_NAME)  # Vanilla transaction expected to always score and pass fw\n        assert_txn_matches_decision(resp, 'score', TEST_RULE_NAME)\n    \n        # Check scores\n        assert vanilla_resp['code'] == 200\n>       assert resp['code'] == (200 + TEST_SCORE)\nE       assert 299 == (200 + 90)\n\ntests/end2end/rules_console/test_smart_rule_flow.py:186: AssertionError","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658483062142,"stop":1658483062586,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658483062606,"stop":1658483062732,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click Add New Rule","time":{"start":1658483062742,"stop":1658483063132,"duration":390},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658483062742,"stop":1658483063037,"duration":295},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Tick Activate Rule upon save","time":{"start":1658483063132,"stop":1658483063205,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in Rule Name","time":{"start":1658483063205,"stop":1658483063408,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"name","value":"'tr_Transaction Date_add_score_20220722_094422'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select static condition from dropdown: 'Transaction Date'","time":{"start":1658483063409,"stop":1658483063499,"duration":90},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"field","value":"'Transaction Date'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select condition option from dropdown: 'Matches'","time":{"start":1658483063500,"stop":1658483063588,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"opt","value":"'Matches'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select value type from dropdown: 'Custom Date:'","time":{"start":1658483063588,"stop":1658483063674,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Custom Date:'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in value input: '2030-06-01'","time":{"start":1658483063675,"stop":1658483064323,"duration":648},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'2030-06-01'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click Add Scoring","time":{"start":1658483064324,"stop":1658483064423,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in score","time":{"start":1658483064423,"stop":1658483064525,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"score","value":"90"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in score reason","time":{"start":1658483064525,"stop":1658483064688,"duration":163},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"reason","value":"'test automation: Transaction Date_add_score'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in comments","time":{"start":1658483064688,"stop":1658483064827,"duration":139},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"comments","value":"'test automation rule (delete me)'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click confirm new rule","time":{"start":1658483064827,"stop":1658483068029,"duration":3202},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658483070031,"stop":1658483070879,"duration":848},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658483070031,"stop":1658483070097,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Transaction Date_add_score_20220722_094422'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658483071881,"stop":1658483072018,"duration":137},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Send test transaction","time":{"start":1658483072054,"stop":1658483072647,"duration":593},"status":"passed","steps":[],"attachments":[{"uid":"53d42518c855b19c","name":"Transaction payload details","source":"53d42518c855b19c.txt","type":"text/plain","size":1341},{"uid":"60b0a4bba01c6e7e","name":"Transaction response details","source":"60b0a4bba01c6e7e.txt","type":"text/plain","size":114}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-999', 'merch_name': 'test-automation-vanilla', 'merch_cat_code': '5816', 'merch_group_id': '12345', 'ISO_MTI': '9999', 'pos_entry_mode': '009', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.0.3', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'steve_rodgers@test.com', 'cc_firstname': 'steve', 'cc_lastname': 'rodgers', 'cc_bin': '424242', 'cc_last4': '4242', 'cc_last_digits': '4242', 'cc_hash': '477bba133c182267fe5f086924abdc5db71f77bfc27f01f2843f2cdc69d89f05', 'cc_exp_date': '1225', 'billing_firstname': 'steve', 'billing_lastname': 'rodgers', 'billing_address': 'brooklyn', 'billing_state': 'New York', 'billing_country_alpha2': 'CN', 'billing_postal_code': '616', 'billing_currency': 'KRW', 'billing_amt': '1000', 'transaction_channel': '0', 'transaction_id_ext': 'tt_vanilla', 'transaction_id_merch': '123', 'fw_cust_id': '60b7259c48675f1f9cf7c24c', 'fw_cust_code': 'XUNZZ53', 'api_version': '3'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Send test transaction","time":{"start":1658483072647,"stop":1658483073306,"duration":659},"status":"passed","steps":[],"attachments":[{"uid":"f63ba9fc0646e3be","name":"Transaction payload details","source":"f63ba9fc0646e3be.txt","type":"text/plain","size":1407},{"uid":"fd1f35bc6bca86fb","name":"Transaction response details","source":"fd1f35bc6bca86fb.txt","type":"text/plain","size":161}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-000', 'merch_name': 'test-automation-base', 'merch_cat_code': '5732', 'merch_group_id': '54321', 'ISO_MTI': '0110', 'pos_entry_mode': '01', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '127.0.1.1', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'tony_stark@test.com', 'cc_firstname': 'tony', 'cc_lastname': 'stark', 'cc_bin': '555555', 'cc_last4': '4444', 'cc_last_digits': '4444', 'cc_hash': '2f725bbd1f405a1ed0336abaf85ddfeb6902a9984a76fd877c3b5cc3b5085a82', 'cc_exp_date': '0226', 'billing_firstname': 'tony', 'billing_lastname': 'stark', 'billing_address': 'Malibu Point', 'billing_state': 'California', 'billing_country_alpha2': 'US', 'billing_postal_code': '10880', 'billing_currency': 'USD', 'billing_amt': '1000', 'transaction_channel': '5', 'transaction_id_ext': 'tt_Transaction Date_add_score', 'transaction_id_merch': '321', 'transaction_gmt_datetime': '2030-06-01 00:00:00'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658483073306,"stop":1658483073306,"duration":0},"status":"passed","steps":[{"name":"Assert transaction is scored","time":{"start":1658483073306,"stop":1658483073306,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 200, 'decline_rule': None, 'error': False, 'score_reason': '', 'sendforauth': 1, 'sendforreview': 0}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Transaction Date_add_score_20220722_094422'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assert transaction decision","time":{"start":1658483073306,"stop":1658483073307,"duration":1},"status":"passed","steps":[{"name":"Assert transaction is scored","time":{"start":1658483073307,"stop":1658483073307,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 299, 'decline_rule': None, 'error': False, 'score_reason': 'test automation: Transaction Datetime_add_score', 'sendforauth': 0, 'sendforreview': 1}"},{"name":"score_expectation","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"fw_response","value":"{'code': 299, 'decline_rule': None, 'error': False, 'score_reason': 'test automation: Transaction Datetime_add_score', 'sendforauth': 0, 'sendforreview': 1}"},{"name":"decision","value":"'score'"},{"name":"rule_name","value":"'tr_Transaction Date_add_score_20220722_094422'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"5050badd400a6f38","name":"4ec24aa4-f699-4d93-b7b8-b9074f3c1d4a-attachment.png","source":"5050badd400a6f38.png","type":"image/png","size":88083}],"parameters":[],"stepsCount":24,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"cleanup_smart_rules::0","time":{"start":1658483073403,"stop":1658483077547,"duration":4144},"status":"passed","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1658483073405,"stop":1658483073465,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1658483073465,"stop":1658483073603,"duration":138},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Filter rules table by name","time":{"start":1658483075727,"stop":1658483076248,"duration":521},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1658483075727,"stop":1658483075766,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"rule_name","value":"'tr_Transaction Date_add_score_20220722_094422'"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get first rule in table","time":{"start":1658483077250,"stop":1658483077344,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click delete rule","time":{"start":1658483077344,"stop":1658483077431,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click confirm delete rule","time":{"start":1658483077431,"stop":1658483077514,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":7,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ui_login::0","time":{"start":1658483077549,"stop":1658483077549,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout::0","time":{"start":1658483077550,"stop":1658483077793,"duration":243},"status":"passed","steps":[{"name":"Click Logout","time":{"start":1658483077671,"stop":1658483077785,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"fw_api::0","time":{"start":1658483077550,"stop":1658483077550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser::0","time":{"start":1658483077833,"stop":1658483078892,"duration":1059},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"indevelopment"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.rules_console"},{"name":"suite","value":"test_smart_rule_flow"},{"name":"subSuite","value":"TestSmartRuleFlow"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"4335-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.rules_console.test_smart_rule_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"smart_rules_add_score","value":"{'field': 'Transaction Date', 'operator': ['Matches', 'Does not match', 'After', 'After or on', 'Before', 'Before or on', 'In Group', 'Not In Group', 'In Range Group', 'Not In Range Group'], 'value_option': ['Custom Date:', 'Custom Date:', 'Date and Time:', 'Date and Time:', 'Date and Time:', 'Date and Time:', 'TA_FW: Date', 'TA_FW: Date', 'TA_FW: Date and Time Range', 'TA_FW: Date and Time Range'], 'value': ['2030-06-01', '2030-06-01', '2030-06-01', '2030-06-01', '2030-06-01', '2030-06-01', None, None, None, None], 'txn_update': [{'transaction_gmt_datetime': '2030-06-01 00:00:00'}, {'transaction_gmt_datetime': '2030-07-01 00:00:00'}, {'transaction_gmt_datetime': '2030-07-01 00:00:00'}, {'transaction_gmt_datetime': '2030-07-01 00:00:00'}, {'transaction_gmt_datetime': '2030-05-01 00:00:00'}, {'transaction_gmt_datetime': '2030-05-01 00:00:00'}, {'transaction_gmt_datetime': '2030-09-15 00:00:00'}, {'transaction_gmt_datetime': '2030-06-01 00:00:00'}, {'transaction_gmt_datetime': '2025-05-15 00:00:00'}, {'transaction_gmt_datetime': '2030-06-01 00:00:00'}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('check_known_issues')","regression","indevelopment"]},"source":"8954ca4e43d5432b.json","parameterValues":["'chrome'","{'field': 'Transaction Date', 'operator': ['Matches', 'Does not match', 'After', 'After or on', 'Before', 'Before or on', 'In Group', 'Not In Group', 'In Range Group', 'Not In Range Group'], 'value_option': ['Custom Date:', 'Custom Date:', 'Date and Time:', 'Date and Time:', 'Date and Time:', 'Date and Time:', 'TA_FW: Date', 'TA_FW: Date', 'TA_FW: Date and Time Range', 'TA_FW: Date and Time Range'], 'value': ['2030-06-01', '2030-06-01', '2030-06-01', '2030-06-01', '2030-06-01', '2030-06-01', None, None, None, None], 'txn_update': [{'transaction_gmt_datetime': '2030-06-01 00:00:00'}, {'transaction_gmt_datetime': '2030-07-01 00:00:00'}, {'transaction_gmt_datetime': '2030-07-01 00:00:00'}, {'transaction_gmt_datetime': '2030-07-01 00:00:00'}, {'transaction_gmt_datetime': '2030-05-01 00:00:00'}, {'transaction_gmt_datetime': '2030-05-01 00:00:00'}, {'transaction_gmt_datetime': '2030-09-15 00:00:00'}, {'transaction_gmt_datetime': '2030-06-01 00:00:00'}, {'transaction_gmt_datetime': '2025-05-15 00:00:00'}, {'transaction_gmt_datetime': '2030-06-01 00:00:00'}]}"]}