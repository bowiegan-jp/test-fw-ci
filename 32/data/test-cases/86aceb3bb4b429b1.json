{"uid":"86aceb3bb4b429b1","name":"Test Transaction API Required Fields Error Message","fullName":"tests.end2end.transactions.test_required_fields.TestTxnAPIRequiredFields#test_required_fields_omited","historyId":"2b0dcf29fe191c9fa498382d4e513b50","time":{"start":1658386872055,"stop":1658386872120,"duration":65},"status":"failed","statusMessage":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7f80ddfa5c10>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7f80dcdf5550>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7f80dcdf5c50>\nrequired_fields_txn_channel = ({'Billing Address': 'billing_address', 'Billing Amount': 'billing_amt', 'Billing Country': 'billing_country_alpha2', 'Billing Currency': 'billing_currency', ...}, (1, 'Digital Kiosk'))\n\n    @allure.title(\"Test Transaction API Required Fields Error Message\")\n    def test_required_fields_omited(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_omit_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = {}\n        # Remove all REQUIRED fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n        txn_resp = fw_api.send_transaction(transaction)\n    \n        # Verify no errors\n        assert txn_resp.get(\"error\")\n        error_field = []\n    \n        resp_errors = txn_resp.get(\"errors\")\n        for f in required_fields.values():\n            if (f in resp_errors.keys() and 'This field is required.' in resp_errors.get(f)) or f in (SITUATIONAL_REQUIRED_FIELDS.values()):\n                continue\n            error_field.append(f)\n    \n>       assert not error_field, f\"The following fields NOT indicated as required by transaction API: {error_field}\"\nE       AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nE       assert not ['cc_last4']\n\ntests/end2end/transactions/test_required_fields.py:66: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1658386799119,"stop":1658386799120,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1658386799120,"stop":1658386799120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1658386872054,"stop":1658386872054,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1658386872054,"stop":1658386872055,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1658386872054,"stop":1658386872054,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_channel","time":{"start":1658386872055,"stop":1658386872055,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"required_fields_txn_channel","time":{"start":1658386872055,"stop":1658386872055,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7f80ddfa5c10>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7f80dcdf5550>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7f80dcdf5c50>\nrequired_fields_txn_channel = ({'Billing Address': 'billing_address', 'Billing Amount': 'billing_amt', 'Billing Country': 'billing_country_alpha2', 'Billing Currency': 'billing_currency', ...}, (1, 'Digital Kiosk'))\n\n    @allure.title(\"Test Transaction API Required Fields Error Message\")\n    def test_required_fields_omited(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_omit_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = {}\n        # Remove all REQUIRED fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n        txn_resp = fw_api.send_transaction(transaction)\n    \n        # Verify no errors\n        assert txn_resp.get(\"error\")\n        error_field = []\n    \n        resp_errors = txn_resp.get(\"errors\")\n        for f in required_fields.values():\n            if (f in resp_errors.keys() and 'This field is required.' in resp_errors.get(f)) or f in (SITUATIONAL_REQUIRED_FIELDS.values()):\n                continue\n            error_field.append(f)\n    \n>       assert not error_field, f\"The following fields NOT indicated as required by transaction API: {error_field}\"\nE       AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nE       assert not ['cc_last4']\n\ntests/end2end/transactions/test_required_fields.py:66: AssertionError","steps":[{"name":"Send test transaction","time":{"start":1658386872056,"stop":1658386872120,"duration":64},"status":"passed","steps":[],"attachments":[{"uid":"2e6f0eeb5e790a0e","name":"Transaction payload details","source":"2e6f0eeb5e790a0e.txt","type":"text/plain","size":200},{"uid":"410f5822f47fc375","name":"Transaction response details","source":"410f5822f47fc375.txt","type":"text/plain","size":1445}],"parameters":[{"name":"payload","value":"{'transaction_id_ext': 'tt_required_fields_omit_Digital Kiosk_20220721_070112', 'transaction_channel': '1'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"fw_api::0","time":{"start":1658386872126,"stop":1658386872126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.transactions"},{"name":"suite","value":"test_required_fields"},{"name":"subSuite","value":"TestTxnAPIRequiredFields"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"19794-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.transactions.test_required_fields"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"txn_channel","value":"(1, 'Digital Kiosk')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"fa96adc7bd022c48","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/31//#testresult/fa96adc7bd022c48","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='10.20.20.221', port=443): Max retries exceeded with url: /api/transaction (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)')))","time":{"start":1658386197449,"stop":1658386197462,"duration":13}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"86aceb3bb4b429b1.json","parameterValues":["(1, 'Digital Kiosk')"]}