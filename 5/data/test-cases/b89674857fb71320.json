{"uid":"b89674857fb71320","name":"Test Transaction API Required Fields","fullName":"tests.end2end.transactions.test_required_fields.TestTxnAPIRequiredFields#test_required_fields_provided","historyId":"07b26141189ddd5f2381e0f55234c08d","time":{"start":1660042687282,"stop":1660042687599,"duration":317},"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7fb41c567c30>('error')\n +    where <built-in method get of dict object at 0x7fb41c567c30> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field is required.']}, ...}.get","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7fb41c39f4d0>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c38d3d0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c38dc90>\nrequired_fields_txn_channel = ({'Billing Address': 'billing_address', 'Billing Amount': 'billing_amt', 'Billing Country': 'billing_country_alpha2', 'Billing Currency': 'billing_currency', ...}, (0, 'eComm'))\n\n    @allure.title(\"Test Transaction API Required Fields\")\n    def test_required_fields_provided(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_incl_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        # Remove all optional fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f not in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n        txn_resp = fw_api.send_transaction(transaction)\n    \n        # Verify no errors\n>       assert not txn_resp.get(\"error\")\nE       AssertionError: assert not True\nE        +  where True = <built-in method get of dict object at 0x7fb41c567c30>('error')\nE        +    where <built-in method get of dict object at 0x7fb41c567c30> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field is required.']}, ...}.get\n\ntests/end2end/transactions/test_required_fields.py:33: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1660042687280,"stop":1660042687280,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"required_fields_txn_channel","time":{"start":1660042687281,"stop":1660042687281,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1660042687281,"stop":1660042687281,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_channel","time":{"start":1660042687281,"stop":1660042687281,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1660042687281,"stop":1660042687281,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7fb41c567c30>('error')\n +    where <built-in method get of dict object at 0x7fb41c567c30> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field is required.']}, ...}.get","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7fb41c39f4d0>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c38d3d0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c38dc90>\nrequired_fields_txn_channel = ({'Billing Address': 'billing_address', 'Billing Amount': 'billing_amt', 'Billing Country': 'billing_country_alpha2', 'Billing Currency': 'billing_currency', ...}, (0, 'eComm'))\n\n    @allure.title(\"Test Transaction API Required Fields\")\n    def test_required_fields_provided(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_incl_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        # Remove all optional fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f not in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n        txn_resp = fw_api.send_transaction(transaction)\n    \n        # Verify no errors\n>       assert not txn_resp.get(\"error\")\nE       AssertionError: assert not True\nE        +  where True = <built-in method get of dict object at 0x7fb41c567c30>('error')\nE        +    where <built-in method get of dict object at 0x7fb41c567c30> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field is required.']}, ...}.get\n\ntests/end2end/transactions/test_required_fields.py:33: AssertionError","steps":[{"name":"Send test transaction","time":{"start":1660042687283,"stop":1660042687599,"duration":316},"status":"passed","steps":[],"attachments":[{"uid":"31507e8022e8757a","name":"Transaction payload details","source":"31507e8022e8757a.txt","type":"text/plain","size":1200},{"uid":"dc523c2e2b49da46","name":"Transaction response details","source":"dc523c2e2b49da46.txt","type":"text/plain","size":175}],"parameters":[{"name":"payload","value":"{'merch_id': 'FW-000', 'merch_name': 'test-automation-base', 'merch_cat_code': '5732', 'merch_group_id': '54321', 'user_ipv4': '127.0.1.1', 'browser_header': {}, 'browser_header_json': '{\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", \"Accept-Encoding\": \"gzip, deflate, sdch\", \"Accept-Language\": \"en-US,en;q=0.8\", \"Cache-Control\": \"max-age=0\", \"Connection\": \"keep-alive\"}', 'user_email': 'tony_stark@test.com', 'cc_firstname': 'tony', 'cc_lastname': 'stark', 'cc_bin': '555555', 'cc_last4': '4444', 'cc_hash': '2f725bbd1f405a1ed0336abaf85ddfeb6902a9984a76fd877c3b5cc3b5085a82', 'cc_exp_date': '0226', 'billing_firstname': 'tony', 'billing_lastname': 'stark', 'billing_address': 'Malibu Point', 'billing_state': 'California', 'billing_country_alpha2': 'US', 'billing_postal_code': '10880', 'billing_currency': 'USD', 'billing_amt': '1000', 'transaction_id_ext': 'tt_required_fields_incl_eComm_20220809_105807', 'transaction_channel': '0'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"fw_api::0","time":{"start":1660042687605,"stop":1660042687605,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.transactions"},{"name":"suite","value":"test_required_fields"},{"name":"subSuite","value":"TestTxnAPIRequiredFields"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"15858-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.transactions.test_required_fields"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"txn_channel","value":"(0, 'eComm')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":2,"unknown":0,"total":7},"items":[{"uid":"4c1e88285d906b62","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/4//#testresult/4c1e88285d906b62","status":"broken","statusDetails":"requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?","time":{"start":1660032440395,"stop":1660032440398,"duration":3}},{"uid":"a489b39265b56dbf","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/35//#testresult/a489b39265b56dbf","status":"passed","time":{"start":1660024557210,"stop":1660024557858,"duration":648}},{"uid":"a1d4ef65a69d8fd2","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/a1d4ef65a69d8fd2","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7f398f661b40>('error')\n +    where <built-in method get of dict object at 0x7f398f661b40> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field is required.']}, ...}.get","time":{"start":1658485147981,"stop":1658485148167,"duration":186}},{"uid":"d556d6b9e8dbd0d2","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/34//#testresult/d556d6b9e8dbd0d2","status":"passed","time":{"start":1658390180470,"stop":1658390181125,"duration":655}},{"uid":"1570883608f9ba1","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/32//#testresult/1570883608f9ba1","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7f80dcccf5a0>('error')\n +    where <built-in method get of dict object at 0x7f80dcccf5a0> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field is required.']}, ...}.get","time":{"start":1658386870715,"stop":1658386870903,"duration":188}},{"uid":"a50916bc236b9c7d","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/31//#testresult/a50916bc236b9c7d","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='10.20.20.221', port=443): Max retries exceeded with url: /api/transaction (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)')))","time":{"start":1658386195873,"stop":1658386195895,"duration":22}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"b89674857fb71320.json","parameterValues":["(0, 'eComm')"]}