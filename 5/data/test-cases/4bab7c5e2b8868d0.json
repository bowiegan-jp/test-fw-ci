{"uid":"4bab7c5e2b8868d0","name":"Test Transaction API Required Fields Error Message","fullName":"tests.end2end.transactions.test_required_fields.TestTxnAPIRequiredFields#test_required_fields_omited","historyId":"275a52291c19e8736584e4b58f042eb0","time":{"start":1660042688865,"stop":1660042688894,"duration":29},"status":"failed","statusMessage":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7fb41c38b950>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c3ab890>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c3de150>\nrequired_fields_txn_channel = ({'Billing Amount': 'billing_amt', 'Billing Currency': 'billing_currency', 'Merchant Group Id': 'merch_group_id', 'Merchant ID': 'merch_id', ...}, (6, 'QR'))\n\n    @allure.title(\"Test Transaction API Required Fields Error Message\")\n    def test_required_fields_omited(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_omit_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = {}\n        # Remove all REQUIRED fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n        txn_resp = fw_api.send_transaction(transaction)\n    \n        # Verify no errors\n        assert txn_resp.get(\"error\")\n        error_field = []\n    \n        resp_errors = txn_resp.get(\"errors\")\n        for f in required_fields.values():\n            if (f in resp_errors.keys() and 'This field is required.' in resp_errors.get(f)) or f in (SITUATIONAL_REQUIRED_FIELDS.values()):\n                continue\n            error_field.append(f)\n    \n>       assert not error_field, f\"The following fields NOT indicated as required by transaction API: {error_field}\"\nE       AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nE       assert not ['cc_last4']\n\ntests/end2end/transactions/test_required_fields.py:66: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1660042688863,"stop":1660042688863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1660042688863,"stop":1660042688863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"required_fields_txn_channel","time":{"start":1660042688863,"stop":1660042688863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1660042688863,"stop":1660042688863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_channel","time":{"start":1660042688863,"stop":1660042688863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","statusTrace":"self = <test_required_fields.TestTxnAPIRequiredFields object at 0x7fb41c38b950>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c3ab890>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c3de150>\nrequired_fields_txn_channel = ({'Billing Amount': 'billing_amt', 'Billing Currency': 'billing_currency', 'Merchant Group Id': 'merch_group_id', 'Merchant ID': 'merch_id', ...}, (6, 'QR'))\n\n    @allure.title(\"Test Transaction API Required Fields Error Message\")\n    def test_required_fields_omited(self, txn_samples, fw_api, required_fields_txn_channel):\n        txn_channel = required_fields_txn_channel[1]\n        required_fields = required_fields_txn_channel[0]\n        UNIQUE_INDENTIFIER = f'tt_required_fields_omit_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Get Base Transaction\n        transaction = {}\n        # Remove all REQUIRED fields\n        txn_fields = list(transaction.keys())\n        for f in txn_fields:\n            if f in required_fields.values():\n                transaction.pop(f)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_INDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n    \n        txn_resp = fw_api.send_transaction(transaction)\n    \n        # Verify no errors\n        assert txn_resp.get(\"error\")\n        error_field = []\n    \n        resp_errors = txn_resp.get(\"errors\")\n        for f in required_fields.values():\n            if (f in resp_errors.keys() and 'This field is required.' in resp_errors.get(f)) or f in (SITUATIONAL_REQUIRED_FIELDS.values()):\n                continue\n            error_field.append(f)\n    \n>       assert not error_field, f\"The following fields NOT indicated as required by transaction API: {error_field}\"\nE       AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nE       assert not ['cc_last4']\n\ntests/end2end/transactions/test_required_fields.py:66: AssertionError","steps":[{"name":"Send test transaction","time":{"start":1660042688865,"stop":1660042688894,"duration":29},"status":"passed","steps":[],"attachments":[{"uid":"f81ecd7af42aa7d7","name":"Transaction payload details","source":"f81ecd7af42aa7d7.txt","type":"text/plain","size":189},{"uid":"df190c9c97785e99","name":"Transaction response details","source":"df190c9c97785e99.txt","type":"text/plain","size":1189}],"parameters":[{"name":"payload","value":"{'transaction_id_ext': 'tt_required_fields_omit_QR_20220809_105808', 'transaction_channel': '6'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"fw_api::0","time":{"start":1660042688901,"stop":1660042688901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.transactions"},{"name":"suite","value":"test_required_fields"},{"name":"subSuite","value":"TestTxnAPIRequiredFields"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"15858-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.transactions.test_required_fields"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"txn_channel","value":"(6, 'QR')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":2,"unknown":0,"total":7},"items":[{"uid":"143cbee38d87cdd4","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/4//#testresult/143cbee38d87cdd4","status":"broken","statusDetails":"requests.exceptions.MissingSchema: Invalid URL '/api/transaction': No schema supplied. Perhaps you meant http:///api/transaction?","time":{"start":1660032441343,"stop":1660032441344,"duration":1}},{"uid":"f91a639991b7b8aa","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/35//#testresult/f91a639991b7b8aa","status":"passed","time":{"start":1660024561596,"stop":1660024561628,"duration":32}},{"uid":"80681f944c34e71a","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/80681f944c34e71a","status":"failed","statusDetails":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","time":{"start":1658485149485,"stop":1658485149516,"duration":31}},{"uid":"4b9ad03c0e11bd9b","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/34//#testresult/4b9ad03c0e11bd9b","status":"passed","time":{"start":1658390184833,"stop":1658390184868,"duration":35}},{"uid":"c32a59dda3dc46e7","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/32//#testresult/c32a59dda3dc46e7","status":"failed","statusDetails":"AssertionError: The following fields NOT indicated as required by transaction API: ['cc_last4']\nassert not ['cc_last4']","time":{"start":1658386872297,"stop":1658386872337,"duration":40}},{"uid":"6c8b980a70bb759a","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/31//#testresult/6c8b980a70bb759a","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='10.20.20.221', port=443): Max retries exceeded with url: /api/transaction (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)')))","time":{"start":1658386198126,"stop":1658386198139,"duration":13}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"4bab7c5e2b8868d0.json","parameterValues":["(6, 'QR')"]}