{"uid":"403580497a533558","name":"Smart Rules Dynamic Field: Shipping Address-Billing Amount (based on Billing Currency)","fullName":"tests.end2end.rules_console.test_smart_rule_flow.TestSmartRuleFlow#test_sr_dynamic_cond","historyId":"90e878080ecea1945297e292e4b626aa","time":{"start":1660039764858,"stop":1660039769934,"duration":5076},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"inline-label\">...</label> is not clickable at point (395, 591). Other element would receive the click: <div class=\"alerty-overlay active\" tabindex=\"-1\" id=\"overlay-alerty645319\"></div>\n  (Session info: headless chrome=104.0.5112.79)","statusTrace":"self = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7fb41c67a090>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c65cc90>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7fb41c781690>\nsmart_rules_dynamic_conditions = {'currency': None, 'field': 'Shipping Address', 'operator': 'Matches', 'repeat_txn': 3, ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c5aca10>\ncleanup_smart_rules = ['tr_Shipping Address_Billing Currency_20220809_100924']\n\n    def test_sr_dynamic_cond(self, fw_api, ui_login, smart_rules_dynamic_conditions, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_dynamic_conditions['field']}_{self._get_dynamic_velocity_abbrev(smart_rules_dynamic_conditions['velocity_type'])}\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        repeat_txn = range(smart_rules_dynamic_conditions['repeat_txn'])\n        allure.dynamic.title(f\"Smart Rules Dynamic Field: {smart_rules_dynamic_conditions['field']}-{smart_rules_dynamic_conditions['velocity_type']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        smartrules_page.verify_smart_rules_clean()\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_dynamic_conditions['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_dynamic_conditions['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_dynamic_conditions['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_dynamic_conditions['value'])\n        create_rule_page.select_decision('block')\n        create_rule_page.click_add_dynamic_condition()\n        create_rule_page.select_dynamic_cond_velocity_type(smart_rules_dynamic_conditions['velocity_type'])\n        create_rule_page.select_dynamic_cond_threshold_currency(smart_rules_dynamic_conditions['currency'])\n        create_rule_page.enter_dynamic_cond_threshold(smart_rules_dynamic_conditions['threshold'])\n        create_rule_page.enter_dynamic_cond_duration(1)  # days\n>       create_rule_page.select_dynamic_cond_group_by(smart_rules_dynamic_conditions['field'])\n\ntests/end2end/rules_console/test_smart_rule_flow.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfw/pages/smart_rules/create_rule_page.py:199: in select_dynamic_cond_group_by\n    group_by_section.select_by_visible_text(value)\nutils/elements/fieldset_element.py:16: in select_by_visible_text\n    opt.click()\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb41c9c6410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55b3b4b429f8 \\\\u003Cunknown>\\\\n#21 0x55b3b4b5cba2 \\\\u003Cunknown>\\\\n#22 0x7f9b93d11609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"inline-label\">...</label> is not clickable at point (395, 591). Other element would receive the click: <div class=\"alerty-overlay active\" tabindex=\"-1\" id=\"overlay-alerty645319\"></div>\nE         (Session info: headless chrome=104.0.5112.79)\n\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1660033344821,"stop":1660033346248,"duration":1427},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout","time":{"start":1660033346249,"stop":1660033346249,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1660039764802,"stop":1660039764802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login","time":{"start":1660039764803,"stop":1660039764857,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1660039764803,"stop":1660039764803,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"smart_rules_dynamic_conditions","time":{"start":1660039764857,"stop":1660039764857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"run_only_str_contains","time":{"start":1660039764857,"stop":1660039764857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1660039764858,"stop":1660039764858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cleanup_smart_rules","time":{"start":1660039764858,"stop":1660039764858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"inline-label\">...</label> is not clickable at point (395, 591). Other element would receive the click: <div class=\"alerty-overlay active\" tabindex=\"-1\" id=\"overlay-alerty645319\"></div>\n  (Session info: headless chrome=104.0.5112.79)","statusTrace":"self = <test_smart_rule_flow.TestSmartRuleFlow object at 0x7fb41c67a090>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c65cc90>\nui_login = <fw.pages.transaction_logs.transaction_page.TransactionLogsPage object at 0x7fb41c781690>\nsmart_rules_dynamic_conditions = {'currency': None, 'field': 'Shipping Address', 'operator': 'Matches', 'repeat_txn': 3, ...}\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c5aca10>\ncleanup_smart_rules = ['tr_Shipping Address_Billing Currency_20220809_100924']\n\n    def test_sr_dynamic_cond(self, fw_api, ui_login, smart_rules_dynamic_conditions, txn_samples, cleanup_smart_rules):\n        # Generate unique test name with timestamp\n        UNIQUE_INDENTIFIER = f\"{smart_rules_dynamic_conditions['field']}_{self._get_dynamic_velocity_abbrev(smart_rules_dynamic_conditions['velocity_type'])}\"\n        TEST_RULE_NAME = f\"tr_{UNIQUE_INDENTIFIER}_{self.current_timestr}\"\n        repeat_txn = range(smart_rules_dynamic_conditions['repeat_txn'])\n        allure.dynamic.title(f\"Smart Rules Dynamic Field: {smart_rules_dynamic_conditions['field']}-{smart_rules_dynamic_conditions['velocity_type']}\")\n    \n        # Post Test Cleanup\n        cleanup_smart_rules.append(TEST_RULE_NAME)\n    \n        # Navigate to Smart Rules\n        side_navbar = SideBarPage(self.driver)\n        side_navbar.expand_rules_console()\n        with url_change(side_navbar, fail_message=\"Failed to navigate to Smart Rules.\"):\n            smartrules_page = side_navbar.click_smart_rules()\n    \n        # Create Smart Rule\n        smartrules_page.verify_smart_rules_clean()\n        create_rule_page = smartrules_page.click_add_new_rule()\n        create_rule_page.tick_active_rule_upon_save()\n        create_rule_page.enter_name(TEST_RULE_NAME)\n        create_rule_page.select_static_condition_field(smart_rules_dynamic_conditions['field'])\n        create_rule_page.select_static_condition_opt(smart_rules_dynamic_conditions['operator'])\n        create_rule_page.select_static_condition_value(smart_rules_dynamic_conditions['value_option'])\n        create_rule_page.enter_static_condition_value(smart_rules_dynamic_conditions['value'])\n        create_rule_page.select_decision('block')\n        create_rule_page.click_add_dynamic_condition()\n        create_rule_page.select_dynamic_cond_velocity_type(smart_rules_dynamic_conditions['velocity_type'])\n        create_rule_page.select_dynamic_cond_threshold_currency(smart_rules_dynamic_conditions['currency'])\n        create_rule_page.enter_dynamic_cond_threshold(smart_rules_dynamic_conditions['threshold'])\n        create_rule_page.enter_dynamic_cond_duration(1)  # days\n>       create_rule_page.select_dynamic_cond_group_by(smart_rules_dynamic_conditions['field'])\n\ntests/end2end/rules_console/test_smart_rule_flow.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfw/pages/smart_rules/create_rule_page.py:199: in select_dynamic_cond_group_by\n    group_by_section.select_by_visible_text(value)\nutils/elements/fieldset_element.py:16: in select_by_visible_text\n    opt.click()\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb41c9c6410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55b3b4b429f8 \\\\u003Cunknown>\\\\n#21 0x55b3b4b5cba2 \\\\u003Cunknown>\\\\n#22 0x7f9b93d11609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"inline-label\">...</label> is not clickable at point (395, 591). Other element would receive the click: <div class=\"alerty-overlay active\" tabindex=\"-1\" id=\"overlay-alerty645319\"></div>\nE         (Session info: headless chrome=104.0.5112.79)\n\n../../_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1660039764860,"stop":1660039765200,"duration":340},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1660039765238,"stop":1660039765853,"duration":615},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Check no conflicting active smart rules","time":{"start":1660039765857,"stop":1660039766546,"duration":689},"status":"passed","steps":[{"name":"Assert rules table as rules","time":{"start":1660039765857,"stop":1660039766546,"duration":689},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click Add New Rule","time":{"start":1660039766546,"stop":1660039766681,"duration":135},"status":"passed","steps":[{"name":"Wait for filter bar to load","time":{"start":1660039766546,"stop":1660039766571,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Tick Activate Rule upon save","time":{"start":1660039766681,"stop":1660039766762,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Fill in Rule Name","time":{"start":1660039766762,"stop":1660039766928,"duration":166},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"name","value":"'tr_Shipping Address_Billing Currency_20220809_100924'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select static condition from dropdown: 'Shipping Address'","time":{"start":1660039766928,"stop":1660039767003,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"field","value":"'Shipping Address'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select condition option from dropdown: 'Matches'","time":{"start":1660039767003,"stop":1660039767083,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"opt","value":"'Matches'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select value type from dropdown: 'Custom:'","time":{"start":1660039767083,"stop":1660039767212,"duration":129},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Custom:'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in value input: '11 test_automation'","time":{"start":1660039767212,"stop":1660039767861,"duration":649},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'11 test_automation'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select Decision Option: 'block'","time":{"start":1660039767861,"stop":1660039767867,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'block'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click Add dynamic condition","time":{"start":1660039767867,"stop":1660039767935,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Select dynamic velocity type: 'Billing Amount (based on Billing Currency)'","time":{"start":1660039767935,"stop":1660039768075,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Billing Amount (based on Billing Currency)'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select currency value: None","time":{"start":1660039768076,"stop":1660039768076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"None"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in dynamic treshold: 2999","time":{"start":1660039768076,"stop":1660039768175,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"2999"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Fill in dynamic condition value","time":{"start":1660039768176,"stop":1660039768276,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"1"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Select dynamic group by condition: 'Shipping Address'","time":{"start":1660039768276,"stop":1660039769934,"duration":1658},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label class=\"inline-label\">...</label> is not clickable at point (395, 591). Other element would receive the click: <div class=\"alerty-overlay active\" tabindex=\"-1\" id=\"overlay-alerty645319\"></div>\n  (Session info: headless chrome=104.0.5112.79)\n\n","statusTrace":"  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/fw/pages/smart_rules/create_rule_page.py\", line 199, in select_dynamic_cond_group_by\n    group_by_section.select_by_visible_text(value)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/utils/elements/fieldset_element.py\", line 16, in select_by_visible_text\n    opt.click()\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'Shipping Address'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"1472f3373b1e9d69","name":"bef49575-4e67-4cd7-a592-b5042a91508b-attachment.png","source":"1472f3373b1e9d69.png","type":"image/png","size":105727},{"uid":"492d7304ef79358f","name":"log","source":"492d7304ef79358f.txt","type":"text/plain","size":384}],"parameters":[],"stepsCount":19,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"cleanup_smart_rules::0","time":{"start":1660039770055,"stop":1660039771181,"duration":1126},"status":"passed","steps":[{"name":"Expand Rules Console Navbar","time":{"start":1660039770056,"stop":1660039770090,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Navigate to Rules Console - Smart Rules","time":{"start":1660039770090,"stop":1660039771180,"duration":1090},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/rules\" title=\"Smart Rules\" class=\"active\">...</a> is not clickable at point (100, 164). Other element would receive the click: <div class=\"alerty-overlay active\" tabindex=\"-1\" id=\"overlay-alerty645319\"></div>\n  (Session info: headless chrome=104.0.5112.79)\n\n","statusTrace":"  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/fw/pages/side_bar_page.py\", line 30, in click_smart_rules\n    self.get_element(self.SMART_RULES).click()\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ui_login::0","time":{"start":1660039771182,"stop":1660039771182,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api::0","time":{"start":1660039771183,"stop":1660039771183,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout::0","time":{"start":1660040641991,"stop":1660040643190,"duration":1199},"status":"passed","steps":[{"name":"Click Logout","time":{"start":1660040642085,"stop":1660040643190,"duration":1105},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li role=\"menuitem\" id=\"logoutLink\" tabindex=\"-1\">...</li> is not clickable at point (705, 67). Other element would receive the click: <a href=\"/settings\">...</a>\n  (Session info: headless chrome=104.0.5112.79)\n\n","statusTrace":"  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/fw/pages/top_navbar_page.py\", line 22, in click_logout\n    logout_btn.click()\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/_tool/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"browser::0","time":{"start":1660040643232,"stop":1660040643291,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.rules_console"},{"name":"suite","value":"test_smart_rule_flow"},{"name":"subSuite","value":"TestSmartRuleFlow"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"15858-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.rules_console.test_smart_rule_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"smart_rules_dynamic_conditions","value":"{'field': 'Shipping Address', 'operator': 'Matches', 'value_option': 'Custom:', 'value': '11 test_automation', 'txn_update': {'shipping_address': '11 test_automation'}, 'velocity_type': 'Billing Amount (based on Billing Currency)', 'currency': None, 'threshold': 2999, 'repeat_txn': 3}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":2,"unknown":0,"total":4},"items":[{"uid":"f231d0aaebd65e4f","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/4//#testresult/f231d0aaebd65e4f","status":"broken","statusDetails":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: headless chrome=104.0.5112.79)","time":{"start":1660032420778,"stop":1660032420778,"duration":0}},{"uid":"157ae09e133a4c7c","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/157ae09e133a4c7c","status":"passed","time":{"start":1658482293054,"stop":1658482307083,"duration":14029}},{"uid":"73c02a2b448526c","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/73c02a2b448526c","status":"passed","time":{"start":1658409030351,"stop":1658409044467,"duration":14116}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"403580497a533558.json","parameterValues":["'chrome'","{'field': 'Shipping Address', 'operator': 'Matches', 'value_option': 'Custom:', 'value': '11 test_automation', 'txn_update': {'shipping_address': '11 test_automation'}, 'velocity_type': 'Billing Amount (based on Billing Currency)', 'currency': None, 'threshold': 2999, 'repeat_txn': 3}"]}