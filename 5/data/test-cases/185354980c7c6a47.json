{"uid":"185354980c7c6a47","name":"Transaction API Padded Fields","fullName":"tests.end2end.transactions.test_padded_fields.TestPaddedFields#test_txn_api_padded_fields","historyId":"11f65fbc7d23e88d5387496b68a09b3f","time":{"start":1660042685558,"stop":1660042685594,"duration":36},"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7fb41c4f4050>('error')\n +    where <built-in method get of dict object at 0x7fb41c4f4050> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field with cc_bin must be at most 10 characters long.']}, ...}.get","statusTrace":"self = <test_padded_fields.TestPaddedFields object at 0x7fb41c2a7110>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c3851d0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c385d50>\ntxn_channel = (6, 'QR')\n\n    @allure.title(\"Transaction API Padded Fields\")\n    def test_txn_api_padded_fields(self, txn_samples, fw_api, txn_channel):\n        UNIQUE_IDENTIFIER = f'tt_padded_txn_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Send Transaction\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_IDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n        # Update all required fields with padd\n        for field, api_field in REQUIRED_FIELDS_DISPLAYED.items():\n            transaction.update({api_field: \"$fw-padded\"})\n        txn_resp = fw_api.send_transaction(transaction)\n>       assert not txn_resp.get(\"error\")\nE       AssertionError: assert not True\nE        +  where True = <built-in method get of dict object at 0x7fb41c4f4050>('error')\nE        +    where <built-in method get of dict object at 0x7fb41c4f4050> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field with cc_bin must be at most 10 characters long.']}, ...}.get\n\ntests/end2end/transactions/test_padded_fields.py:28: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1660032706972,"stop":1660032706972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1660042679088,"stop":1660042680496,"duration":1408},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout","time":{"start":1660042680497,"stop":1660042680497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login","time":{"start":1660042685510,"stop":1660042685557,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1660042685510,"stop":1660042685510,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_samples","time":{"start":1660042685557,"stop":1660042685557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"txn_channel","time":{"start":1660042685557,"stop":1660042685558,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"fw_api","time":{"start":1660042685557,"stop":1660042685557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7fb41c4f4050>('error')\n +    where <built-in method get of dict object at 0x7fb41c4f4050> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field with cc_bin must be at most 10 characters long.']}, ...}.get","statusTrace":"self = <test_padded_fields.TestPaddedFields object at 0x7fb41c2a7110>\ntxn_samples = <test_data.transactions.TransactionSamples object at 0x7fb41c3851d0>\nfw_api = <fw.api.client.FraudwallAPI object at 0x7fb41c385d50>\ntxn_channel = (6, 'QR')\n\n    @allure.title(\"Transaction API Padded Fields\")\n    def test_txn_api_padded_fields(self, txn_samples, fw_api, txn_channel):\n        UNIQUE_IDENTIFIER = f'tt_padded_txn_{txn_channel[1]}_{self.current_timestr}'\n    \n        # Send Transaction\n        transaction = copy.deepcopy(txn_samples.BASE_TEST)\n        transaction.update({\n            'transaction_id_ext': UNIQUE_IDENTIFIER,\n            'transaction_channel': str(txn_channel[0])\n        })\n        # Update all required fields with padd\n        for field, api_field in REQUIRED_FIELDS_DISPLAYED.items():\n            transaction.update({api_field: \"$fw-padded\"})\n        txn_resp = fw_api.send_transaction(transaction)\n>       assert not txn_resp.get(\"error\")\nE       AssertionError: assert not True\nE        +  where True = <built-in method get of dict object at 0x7fb41c4f4050>('error')\nE        +    where <built-in method get of dict object at 0x7fb41c4f4050> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field with cc_bin must be at most 10 characters long.']}, ...}.get\n\ntests/end2end/transactions/test_padded_fields.py:28: AssertionError","steps":[{"name":"Send test transaction","time":{"start":1660042685559,"stop":1660042685594,"duration":35},"status":"passed","steps":[],"attachments":[{"uid":"23c2948759be9f50","name":"Transaction payload details","source":"23c2948759be9f50.txt","type":"text/plain","size":1110},{"uid":"c8846fa2a4906d8e","name":"Transaction response details","source":"c8846fa2a4906d8e.txt","type":"text/plain","size":244}],"parameters":[{"name":"payload","value":"{'merch_id': '$fw-padded', 'merch_name': '$fw-padded', 'merch_cat_code': '$fw-padded', 'merch_group_id': '$fw-padded', 'ISO_MTI': '0110', 'pos_entry_mode': '01', 'terminal_id': '99', 'ISO_pcc': '00', 'ISO_proc_code': '10200', 'user_ipv4': '$fw-padded', 'browser_header': '$fw-padded', 'browser_header_json': '$fw-padded', 'user_email': '$fw-padded', 'cc_firstname': '$fw-padded', 'cc_lastname': '$fw-padded', 'cc_bin': '$fw-padded', 'cc_last4': '$fw-padded', 'cc_last_digits': '4444', 'cc_hash': '2f725bbd1f405a1ed0336abaf85ddfeb6902a9984a76fd877c3b5cc3b5085a82', 'cc_exp_date': '$fw-padded', 'billing_firstname': 'tony', 'billing_lastname': 'stark', 'billing_address': 'Malibu Point', 'billing_state': 'California', 'billing_country_alpha2': 'US', 'billing_postal_code': '10880', 'billing_currency': '$fw-padded', 'billing_amt': '$fw-padded', 'transaction_channel': '6', 'transaction_id_ext': 'tt_padded_txn_QR_20220809_105805', 'transaction_id_merch': '321', 'user_ipv6': '$fw-padded'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"7173ac2df4eec210","name":"23bd1765-fce2-4384-982b-c113fcdf6488-attachment.png","source":"7173ac2df4eec210.png","type":"image/png","size":64768}],"parameters":[],"stepsCount":1,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"fw_api::0","time":{"start":1660042685817,"stop":1660042685817,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_login::0","time":{"start":1660042685818,"stop":1660042685818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ui_logout::0","time":{"start":1660042686749,"stop":1660042687216,"duration":467},"status":"passed","steps":[{"name":"Click Logout","time":{"start":1660042687106,"stop":1660042687206,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"browser::0","time":{"start":1660042687218,"stop":1660042687275,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.end2end.transactions"},{"name":"suite","value":"test_padded_fields"},{"name":"subSuite","value":"TestPaddedFields"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"15858-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.end2end.transactions.test_padded_fields"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"txn_channel","value":"(6, 'QR')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":2,"unknown":0,"total":7},"items":[{"uid":"8c0074b1d6eaef1c","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/4//#testresult/8c0074b1d6eaef1c","status":"broken","statusDetails":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: headless chrome=104.0.5112.79)","time":{"start":1660032440168,"stop":1660032440168,"duration":0}},{"uid":"48231548d16d0e9e","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/35//#testresult/48231548d16d0e9e","status":"passed","time":{"start":1660024494622,"stop":1660024509912,"duration":15290}},{"uid":"dac5060613f13a21","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/1//#testresult/dac5060613f13a21","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7f398f5f3d20>('error')\n +    where <built-in method get of dict object at 0x7f398f5f3d20> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field with cc_bin must be at most 10 characters long.']}, ...}.get","time":{"start":1658485145808,"stop":1658485145846,"duration":38}},{"uid":"ed09fd8d584b836e","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/34//#testresult/ed09fd8d584b836e","status":"passed","time":{"start":1658390077561,"stop":1658390102864,"duration":25303}},{"uid":"e9d1d57714193cb1","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/32//#testresult/e9d1d57714193cb1","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = <built-in method get of dict object at 0x7f80ddf8a4b0>('error')\n +    where <built-in method get of dict object at 0x7f80ddf8a4b0> = {'code': 500, 'decline_rule': None, 'error': True, 'errors': {'cc_last_digits': ['This field with cc_bin must be at most 10 characters long.']}, ...}.get","time":{"start":1658386868352,"stop":1658386868422,"duration":70}},{"uid":"daf8c5e46d58c652","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/31//#testresult/daf8c5e46d58c652","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='10.20.20.221', port=443): Max retries exceeded with url: /api/transaction (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)')))","time":{"start":1658386192165,"stop":1658386192189,"duration":24}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","regression"]},"source":"185354980c7c6a47.json","parameterValues":["'chrome'","(6, 'QR')"]}