{"uid":"fcf761d128f4df11","name":"test_login_failed[chrome]","fullName":"tests.ui.auth.test_login.TestLogin#test_login_failed","historyId":"b602c7da2fb125d5a7ad979882328b15","time":{"start":1658383995399,"stop":1658383995399,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /snap/chromium/2033/usr/lib/chromium-browser/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","statusTrace":"request = <SubRequest 'browser' for <Function test_login_failed[chrome]>>\ncfg = <config.Config object at 0x7fec77f6ff10>\n\n    @allure.step(\"Initiate browser instance\")\n    @pytest.fixture(params=Config.BROWSERS, scope=\"class\")\n    def browser(request, cfg):\n        SUPPORTED_BROWSERS = [\"chrome\", \"firefox\"]\n        PROXY = cfg.HTTP_PROXY\n        remote = request.config.option.remote\n    \n        browser = request.param.lower()\n        if browser not in SUPPORTED_BROWSERS:\n            pytest.skip(f\"Unsupported browser type: {browser}\")\n        if browser == \"chrome\":\n            options = chrome_opt()\n            options.add_argument(\"--ignore-ssl-errors=yes\")\n            options.add_argument(\"--ignore-certificate-errors\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            if PROXY:\n                options.add_argument('--proxy-server=http://%s' % f'{PROXY}')\n            options.add_argument(\"--kiosk\")\n            if cfg.HEADLESS_TEST:\n                options.headless = True\n                options.add_argument(\"--kiosk\")\n            if remote:\n                dc = webdriver.DesiredCapabilities.CHROME.copy()\n                dc.update({\n                    \"name\": request.node.name,\n                    \"browserName\": \"chrome\",\n                    \"browserVersion\": \"90.0\",\n                    \"selenoid:options\": {\n                        \"enableVNC\": True,\n                        \"enableVideo\": False\n                    }\n                })\n                web_driver = webdriver.Remote(command_executor=cfg.REMOTE_GRID_URL, desired_capabilities=dc, options=options)\n            else:\n>               web_driver = webdriver.Chrome(options=options)\n\ntests/conftest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/chrome/webdriver.py:81: in __init__\n    desired_capabilities=desired_capabilities)\n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fec78b82490>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x55827ff9da43 \\\\u003Cunknown>\\\\n#15 0x55827ffb7593 \\\\u003Cunknown>\\\\n#16 0x7ff222231609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /snap/chromium/2033/usr/lib/chromium-browser/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:242: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1658383995400,"stop":1658383995401,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1658383995401,"stop":1658383996474,"duration":1073},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /snap/chromium/2033/usr/lib/chromium-browser/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/var/snap/amazon-ssm-agent/5656/actions-runner/_work/test-fw-ci/test-fw-ci/tests/conftest.py\", line 88, in browser\n    web_driver = webdriver.Chrome(options=options)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/chrome/webdriver.py\", line 81, in __init__\n    desired_capabilities=desired_capabilities)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py\", line 157, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py\", line 252, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"parentSuite","value":"tests.ui.auth"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"ip-10-20-30-10"},{"name":"thread","value":"10668-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui.auth.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"17888a0c199768bb","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/24//#testresult/17888a0c199768bb","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /snap/chromium/2033/usr/lib/chromium-browser/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","time":{"start":1658376040392,"stop":1658376040392,"duration":0}},{"uid":"d0a7062ccf35f397","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/23//#testresult/d0a7062ccf35f397","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home","time":{"start":1658375440128,"stop":1658375440128,"duration":0}},{"uid":"2c2f11023eff2a02","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/17//#testresult/2c2f11023eff2a02","status":"passed","time":{"start":1657877839029,"stop":1657877839640,"duration":611}},{"uid":"c6ccbf7b55cf9aba","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/16//#testresult/c6ccbf7b55cf9aba","status":"passed","time":{"start":1657875634722,"stop":1657875635526,"duration":804}},{"uid":"efe785859d552a60","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/15//#testresult/efe785859d552a60","status":"passed","time":{"start":1657875141329,"stop":1657875142687,"duration":1358}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","smoke"]},"source":"fcf761d128f4df11.json","parameterValues":["'chrome'"]}