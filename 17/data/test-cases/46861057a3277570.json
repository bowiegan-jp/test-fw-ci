{"uid":"46861057a3277570","name":"test_login_successful[chrome]","fullName":"tests.ui.auth.test_login.TestLogin#test_login_successful","historyId":"53a00a84210bad2d528a0987d3ecb6e0","time":{"start":1657877839643,"stop":1657877844883,"duration":5240},"status":"broken","statusMessage":"TimeoutError: Failed to login.","statusTrace":"page = <fw.pages.login_page.LoginPage object at 0x7fb04d20b790>\nwait_duration = 5, fail_message = 'Failed to login.'\n\n    @contextmanager\n    def url_change(page, wait_duration=5, fail_message=''):\n        \"\"\"\n        context manager for url change driver wait to be used in tests when url change is expected\n        \"\"\"\n        current_url = page.driver.current_url\n        yield\n        try:\n>           WebDriverWait(page.driver, wait_duration).until(url_changed(current_url))\n\nutils/explicit_waits/custom_waits.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a6c0136c26c0cd16e9d99984b1df8c66\")>\nmethod = <utils.explicit_waits.custom_waits.url_changed object at 0x7fb04d297050>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x7fb04d2bad10>\nusers = <config.Credentials object at 0x7fb04d2a0390>\n\n    def test_login_successful(self, users):\n        # Login\n        login_page = LoginPage(self.driver)\n        login_page.enter_username(users.ADMIN.username)\n        login_page.enter_password(users.ADMIN.password)\n    \n        with url_change(login_page, fail_message=\"Failed to login.\"):\n>           landing_page = login_page.click_login()\n\ntests/ui/auth/test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/contextlib.py:119: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npage = <fw.pages.login_page.LoginPage object at 0x7fb04d20b790>\nwait_duration = 5, fail_message = 'Failed to login.'\n\n    @contextmanager\n    def url_change(page, wait_duration=5, fail_message=''):\n        \"\"\"\n        context manager for url change driver wait to be used in tests when url change is expected\n        \"\"\"\n        current_url = page.driver.current_url\n        yield\n        try:\n            WebDriverWait(page.driver, wait_duration).until(url_changed(current_url))\n        except TimeoutException as te:\n            if fail_message:\n>               raise TimeoutError(fail_message)\nE               TimeoutError: Failed to login.\n\nutils/explicit_waits/custom_waits.py:33: TimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cfg","time":{"start":1657877831274,"stop":1657877831274,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1657877831274,"stop":1657877839027,"duration":7753},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1657877839642,"stop":1657877839642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_known_issues","time":{"start":1657877839642,"stop":1657877839642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"TimeoutError: Failed to login.","statusTrace":"page = <fw.pages.login_page.LoginPage object at 0x7fb04d20b790>\nwait_duration = 5, fail_message = 'Failed to login.'\n\n    @contextmanager\n    def url_change(page, wait_duration=5, fail_message=''):\n        \"\"\"\n        context manager for url change driver wait to be used in tests when url change is expected\n        \"\"\"\n        current_url = page.driver.current_url\n        yield\n        try:\n>           WebDriverWait(page.driver, wait_duration).until(url_changed(current_url))\n\nutils/explicit_waits/custom_waits.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a6c0136c26c0cd16e9d99984b1df8c66\")>\nmethod = <utils.explicit_waits.custom_waits.url_changed object at 0x7fb04d297050>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x7fb04d2bad10>\nusers = <config.Credentials object at 0x7fb04d2a0390>\n\n    def test_login_successful(self, users):\n        # Login\n        login_page = LoginPage(self.driver)\n        login_page.enter_username(users.ADMIN.username)\n        login_page.enter_password(users.ADMIN.password)\n    \n        with url_change(login_page, fail_message=\"Failed to login.\"):\n>           landing_page = login_page.click_login()\n\ntests/ui/auth/test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.7.13/x64/lib/python3.7/contextlib.py:119: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npage = <fw.pages.login_page.LoginPage object at 0x7fb04d20b790>\nwait_duration = 5, fail_message = 'Failed to login.'\n\n    @contextmanager\n    def url_change(page, wait_duration=5, fail_message=''):\n        \"\"\"\n        context manager for url change driver wait to be used in tests when url change is expected\n        \"\"\"\n        current_url = page.driver.current_url\n        yield\n        try:\n            WebDriverWait(page.driver, wait_duration).until(url_changed(current_url))\n        except TimeoutException as te:\n            if fail_message:\n>               raise TimeoutError(fail_message)\nE               TimeoutError: Failed to login.\n\nutils/explicit_waits/custom_waits.py:33: TimeoutError","steps":[],"attachments":[{"uid":"17dbc6326243e7e2","name":"11628471-66cd-4a30-8f7a-0deed5a1675e-attachment.png","source":"17dbc6326243e7e2.png","type":"image/png","size":53059}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1657877844990,"stop":1657877845046,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"@pytest.mark.usefixtures('check_known_issues')"},{"name":"parentSuite","value":"tests.ui.auth"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az198-929"},{"name":"thread","value":"2993-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui.auth.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"6c9e959f63760ec2","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/16//#testresult/6c9e959f63760ec2","status":"broken","statusDetails":"TimeoutError: Failed to login.","time":{"start":1657875635530,"stop":1657875640813,"duration":5283}},{"uid":"b20fb409ecd9ba2e","reportUrl":"https://bowiegan-jp.github.io/test-fw-ci/15//#testresult/b20fb409ecd9ba2e","status":"broken","statusDetails":"TimeoutError: Failed to login.","time":{"start":1657875142691,"stop":1657875148002,"duration":5311}}]},"tags":["@pytest.mark.usefixtures('check_known_issues')","smoke"]},"source":"46861057a3277570.json","parameterValues":["'chrome'"]}